{"version":3,"sources":["uni-app:///main.js","webpack:///D:/代码/小程序/新欣火1/pages/teacher-schedule/teacher-schedule.vue?6f2e","webpack:///D:/代码/小程序/新欣火1/pages/teacher-schedule/teacher-schedule.vue?c7a5","webpack:///D:/代码/小程序/新欣火1/pages/teacher-schedule/teacher-schedule.vue?a9b6","webpack:///D:/代码/小程序/新欣火1/pages/teacher-schedule/teacher-schedule.vue?c759","uni-app:///pages/teacher-schedule/teacher-schedule.vue","webpack:///D:/代码/小程序/新欣火1/pages/teacher-schedule/teacher-schedule.vue?788d","webpack:///D:/代码/小程序/新欣火1/pages/teacher-schedule/teacher-schedule.vue?3a8c"],"names":["wx","__webpack_require_UNI_MP_PLUGIN__","__webpack_require__","createPage","Page","d","data","allTeacherList","teacherIndex","searchKeyword","selectedTeacher","rawScheduleList","weekSchedule","isLoading","weekOffset","initialScheduleState","courseTypes","courseOptions","periods","periodTimes","weekDaysOrder","currentDate","now","computed","filteredTeacherList","teacher","weekTitle","weekRangeText","sunday","watch","handler","uni","console","deep","onShow","teacherId","setTimeout","onUnload","url","methods","checkAdminRoleAndFetchTeachers","title","icon","fetchTeachers","uniCloud","name","action","success","result","fail","enrichTeachersWithOpenid","i","params","userId","userResult","userDetail","selectTeacher","fetchTeacherSchedule","teacher_id","startDate","endDate","complete","buildWeekSchedule","course_date","course_slot_1","course_slot_1_type","course_slot_1_class","course_slot_1_location","course_slot_1_remark","course_slot_2","course_slot_2_type","course_slot_2_class","course_slot_2_location","course_slot_2_remark","course_slot_3","course_slot_3_type","course_slot_3_class","course_slot_3_location","course_slot_3_remark","course_slot_4","course_slot_4_type","course_slot_4_class","course_slot_4_location","course_slot_4_remark","course_slot_5","course_slot_5_type","course_slot_5_class","course_slot_5_location","course_slot_5_remark","course_slot_6","course_slot_6_type","course_slot_6_class","course_slot_6_location","course_slot_6_remark","courseDate","coursesForDay","daySchedule","课程名","类型","班级","教室","备注","newWeekSchedule","getMondayOfWeek","onInputChange","dayIndex","slot","field","value","event","key","onTypeChange","getTypeIndex","getCourseOptionIndex","getClassOptionIndex","onCourseOptionChange","onClassOptionChange","changeWeek","monday","saveSchedule","day","uid","username","schedules","adminName","res","weekKey","cacheKey","sendScheduleNotifications","currentTeacherId","latestCourse","latestCourseInfo","latestDateTime","schedule","courseKey","typeKey","classKey","locationKey","courseName","courseType","className","location","courseDateTime","date","teacherOpenid","teacherName","openid","hasOpenid","openidType","hasSessionSubscription","sessionResult","classTime","remark","studentName","page","subscriptionResult","errorDetail","message","error","code","getSlotStartTime","formatClassTime","getDayOfWeek","getDayOfWeekIndex","getCourseColor","goHome","returnToCurrentWeek","formatDateWithWeek","onInputFocus","checkSessionSubscription","createSessionSubscriptionForTeacher","isValid","createTime","expireTime","usageCount","type","sendScheduleNotificationWithSession","isSessionSubscription","method","content","showCancel","confirmText","cancelText","fallbackToTraditionalSubscription","logSessionScheduleMessage","sessionMessages","courseInfo","timestamp","updateSessionUsage","sessionData","formatDate"],"mappings":";;;;;;;;;;;;;AAAA;AAE2D;AAC3D;AACA;AAHA;AACAA,EAAE,CAACC,iCAAiC,GAAGC,mBAAmB;AAG1DC,UAAU,CAACC,wBAAI,CAAC,C;;;;;;;;;;;;;ACLhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyI;AACzI;AACoE;AACL;AACqC;;;AAGpG;AACgL;AAChL,gBAAgB,uLAAU;AAC1B,EAAE,sFAAM;AACR,EAAE,uGAAM;AACR,EAAE,gHAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,2GAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAA8qB,CAAgB,4qBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;ACiGlsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;EACA;EACA;EACAC;EACAA;EACA;AACA;AACA;EACA;EACA;EACA;EACA;AACA;AAAA,eACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MAAA;MACAC;MAAA;MACAC;MACAC;MACAC;MAAA;MACAC;MACAC;MACAC;MAAA;MACAC,cACA,cACA,eACA,eACA,eACA,eACA,cACA;MACAC;MAAA;MACAC;QACA;QACAC;QACA;QACA;QACAA;QACA;MACA;IACA;EACA;EACAC;IACAC;MAAA;MACA;QACA;MACA;MACA;QAAA,OACAC;MAAA,EACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;MACAC;MACA;IACA;EACA;EACAC;IACAjB;MACAkB;QACA;QACA;UACA;UACA;UACA;UACA;UACAC;UACAC;QACA;MACA;MACAC;IACA;EACA;EACAC;IAAA;IACAF;;IAEA;IACA;IACA;;IAEA;IACA;MACAG;MACAH;IACA;MACAG;MACAH;IACA;IAEAA;;IAEA;IACA;IACA;IACA;IAEAA;;IAEA;IACA;IACA;IAEA;MACAA;MACA;MACA;;MAEA;MACAI;QACA;UACAJ;UACA;QACA;MACA;IACA;MACAA;MACA;IACA;;IAEA;IACA;EACA;EACAK;IACA;IACA;MACAN;QAAAO;MAAA;MACAP;IACA;EACA;EACAQ;IACAC;MACA;MACA;MACA;MACA;MACA;QACA;MACA;QACAT;UAAAU;UAAAC;QAAA;QACAN;UACAL;YAAAO;UAAA;QACA;QACA;MACA;IACA;IACAK;MAAA;MACAC;QACAC;QACAvC;UAAAwC;QAAA;QACAC;UAAA;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBACAC;oBAAA,MACAA;sBAAA;sBAAA;oBAAA;oBACA;oBACA;sBAAA;oBAAA;;oBAEA;oBAAA;oBAAA,OACA;kBAAA;oBAEA;sBACA;oBACA;sBACAjB;wBAAAU;wBAAAC;sBAAA;oBACA;oBAAA;oBAAA;kBAAA;oBAEAX;sBAAAU;sBAAAC;oBAAA;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAEA;UAAA;YAAA;UAAA;UAAA;QAAA;QACAO;UACAlB;YAAAU;YAAAC;UAAA;QACA;MACA;IACA;IAEA;IACAQ;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEAlB;gBAEAmB;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;gBACA1B;gBAAA;gBAAA;gBAAA,OAGAmB;kBACAC;kBACAvC;oBACAwC;oBACAM;sBAAAC;oBAAA;kBACA;gBACA;cAAA;gBANAC;gBAQA;kBACAC;kBACA;oBACA;oBACAvB;kBACA;oBACAA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;cAAA;gBAtBAmB;gBAAA;gBAAA;cAAA;gBA0BAnB;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IACAwB;MACAxB;MACA;MACA;MACAA;;MAEA;MACA;;MAEA;MACA;MACA;MACA;MAEAA;MACA;IACA;IACAyB;MAAA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA7B;MAEAI;MACAA;MACAA;MACAA;MAEAY;QACAC;QACAvC;UACAwC;UACAM;YACAM;YACAC;YACAC;UACA;QACA;QACAb;UACAf;UACA;UACA;YACAA;YACAA;YACA;;YAEA;YACA;;YAEA;YACA;YACA;YACAD;YACAC;UACA;YACAA;YACA;YACA;UACA;QACA;QACAiB;UACAjB;UACA;UACA;QACA;QACA6B;UACA;UACA7B;QACA;MACA;IACA;IACA8B;MAAA;MACA;MACA;MACA;MACA9B;MACAA;MACAA;MACAA;MAEA;MACA;MAAA,2BAEAmB;QACA;QACA;QACAnB;QAEA;UACA+B;UACAC;UAAAC;UAAAC;UAAAC;UAAAC;UACAC;UAAAC;UAAAC;UAAAC;UAAAC;UACAC;UAAAC;UAAAC;UAAAC;UAAAC;UACAC;UAAAC;UAAAC;UAAAC;UAAAC;UACAC;UAAAC;UAAAC;UAAAC;UAAAC;UACAC;UAAAC;UAAAC;UAAAC;UAAAC;QACA;;QAEA;QACA;UACA;UACA;YACAC;UACA;YACAA;UACA;UACA;UACA9D;UACA;QACA;QAEAA;;QAEA;QACA+D;UACA/D;UAEA;YACAA;YACA;UACA;UAEA;UACA;YACAgE;YACAA;YACAA;YACAA;YACAA;YAEAhE;cACAiE;cACAC;cACAC;cACAC;cACAC;YACA;UACA;QACA;QAEAC;QACAtE;MAAA;MA1DA;QAAA;MA2DA;MAEA;MACA;MAEAA;MACAA;QAAA;MAAA;MACAA;;MAEA;MACA;IACA;IACAuE;MAAA;MACA;MACAjF;MACA;MACA;MACAA;MACA;IACA;IACAkF;MACA;MACA;MACAxE;QAAAyE;QAAAC;QAAAC;QAAAC;QAAAC;MAAA;;MAEA;MACA;QACA;QACA7E;UAAAyE;UAAAC;UAAAC;UAAAC;UAAAE;QAAA;;QAEA;QACA;QACA;QACA;QACA;QACA/E;QACAC;MACA;IACA;IACA+E;MACA;QACA;QACA/E;UAAAyE;UAAAC;UAAAE;QAAA;QACA;QACA;QACA;QACA;QACA;QACA7E;MACA;IACA;IACAiF;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;QACA;QACAnF;UAAAyE;UAAAC;UAAAE;QAAA;QACA;QACA;QACA;QACA;QACA;QACA7E;MACA;IACA;IACAqF;MACA;QACA;QACA;;QAEA;QACA;QAEApF;UAAAyE;UAAAC;UAAAE;QAAA;QACA;QACA;QACA;QACA;QACA;QACA7E;MACA;IACA;IACAsF;MAAA;MACArF;MACA;MACAsF;MACA;MAEAtF;;MAEA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MAEA;QACAA;QACA;;QAEA;QACAI;UACA;YACAJ;YACA;UACA;QACA;MACA;QACAA;QACA;UACA;QACA;UACA;QACA;MACA;IACA;IACAuF;MAAA;MACA;QAAA,uCACAC;UACA9D;UACA+D;UAAA;UACAC;QAAA;MAAA,CACA;;MAEA;MACA;MACA;MAEA9E;QACAC;QACAvC;UACAwC;UACAM;YACAuE;YACAC;UACA;QACA;QACA7E;UAAA;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBAAA,MACA8E;sBAAA;sBAAA;oBAAA;oBACA9F;sBAAAU;sBAAAC;oBAAA;;oBAEA;oBACAP;oBACAmF;oBACAQ;oBACAC;oBACAhG;;oBAEA;oBAAA;oBAAA,OACA;kBAAA;oBAEA;oBAAA;oBAAA;kBAAA;oBAEAA;sBAAAU;sBAAAC;oBAAA;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAEA;UAAA;YAAA;UAAA;UAAA;QAAA;QACAO;UACAlB;YAAAU;YAAAC;UAAA;QACA;MACA;IACA;IAEA;IACAsF;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEAhG;;gBAEA;gBACAiG,+CAEA;gBACAC;gBACAC;gBACAC,uBAEA;gBAAA,uCACAT;gBAAA;gBAAA;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;gBAAAU;gBACAtE,sFAEA;gBAAA,MACA0D;kBAAA;kBAAA;gBAAA;gBACAzF;gBAAA;cAAA;gBAIA;gBACA;kBACAsG;kBACAC;kBACAC;kBACAC;kBAEAC;kBACAC;kBACAC;kBACAC,kCAEA;kBACA;oBACA;oBACAC,2FAEA;oBACA;sBACAV;sBACAF;sBACAC;wBACAO;wBACAC;wBACAC;wBACAC;wBACAE;wBACArC;sBACA;sBACA1E;oBACA;kBACA;gBACA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;gBAAA,MAIAkG;kBAAA;kBAAA;gBAAA;gBACAlG;;gBAEA;gBACAgH;gBACAhH;kBACAG;kBACA8G;kBACAC;kBACAC;kBACAC;gBACA;gBAAA,IAEAJ;kBAAA;kBAAA;gBAAA;gBACAhH;gBAAA;cAAA;gBAAA,MAIAgH;kBAAA;kBAAA;gBAAA;gBACAhH;gBAAA;cAAA;gBAAA;gBAMA;gBACAqH;gBAAA,KAEAA;kBAAA;kBAAA;gBAAA;gBACArH;;gBAEA;gBAAA;gBAAA,OACA,2EACAmG;kBACAe;gBAAA,GACA;cAAA;gBAHAI;gBAKA;kBACAtH;gBACA;kBACAA;gBACA;gBAAA;gBAAA;cAAA;gBAEAA;;gBAEA;gBAAA;gBAAA,OACAY;kBACAC;kBACAvC;oBACAwC;oBACAoG;oBACAR;oBACAa;oBACAC;oBAAA;oBACAC;oBACAC;kBACA;gBACA;cAAA;gBAXAC;gBAaA;kBACA3H;gBACA;kBACA4H;kBACA5H;oBACA6H;oBACAC;oBACAC;kBACA;;kBAEA;kBACA;oBACA/H;;oBAEA;oBACA;kBACA;gBACA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAGAA;cAAA;gBAAA;gBAAA;cAAA;gBAGAA;cAAA;gBAGAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAgI;MACA,wBACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA,CACA;;MAEA;IACA;IAEA;IACAC;MACA;;MAEA;MACA;MACA;MACA;;MAEA;MACA,wBACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA,CACA;;MAEA;;MAEA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACAtI;QAAAO;MAAA;IACA;IACAgI;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACAC;MACAxI;MACA;MACA;IACA;IAEA;IACAyI;MACA;QACA;QACA;QACA;QAEA;UACA;UACA;YACAzI;YACA;UACA;YACAA;YACA;UACA;QACA;QAEA;MACA;QACAA;QACA;MACA;IACA;IAEA;IACA0I;MACA;QACA;QACA;UACAC;UACAC;UACAC;UAAA;UACAC;UACA5B;UACA6B;QACA;QAEAhJ;QACAC;QAEA;MACA;QACAA;QACA;MACA;IACA;IAEA;IACAgJ;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEAhJ;gBACAA;kBACAkH;kBACAR;kBACAa;kBACAC;kBACAC;kBACAwB;gBACA;;gBAEA;gBACA;gBAAA;gBAAA,OACArI;kBACAC;kBACAvC;oBACAwC;oBACAoG;oBACAR;oBACAa;oBACAC;oBACAC;oBACAC;oBACAuB;kBACA;gBACA;cAAA;gBAZAtB;gBAcA3H;gBAAA,MAEA2H;kBAAA;kBAAA;gBAAA;gBACA3H;gBACAA;;gBAEA;gBACAkJ;gBACA;kBACAlJ;;kBAEA;kBACAD;oBACAU;oBACA0I;oBACAC;oBACAC;kBACA;gBACA;;gBAEA;gBACA;;gBAEA;gBACA;gBAAA,kCAEA;kBAAAtI;kBAAAzC;gBAAA;cAAA;gBAEA0B;gBACAA;;gBAEA;gBACA4H;gBACA;kBACA5H;;kBAEA;kBACAD;oBACAU;oBACA0I;oBACAC;oBACAE;oBACAD;oBACAtI;sBACA;wBACA;wBACAhB;0BACAO;wBACA;sBACA;oBACA;kBACA;gBACA;;gBAEA;gBAAA;gBAAA,OACA;cAAA;gBAAA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAGAN;;gBAEA;gBAAA;gBAAA,OACA;cAAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAuJ;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEAvJ;gBAAA;gBAAA,OAEAY;kBACAC;kBACAvC;oBACAwC;oBACAoG;oBACAR;oBACAa;oBACAC;oBACAC;oBACAC;oBACAuB;kBACA;gBACA;cAAA;gBAZAtB;gBAAA,MAcAA;kBAAA;kBAAA;gBAAA;gBACA3H;gBAAA,kCACA;kBAAAe;kBAAAzC;kBAAA4K;gBAAA;cAAA;gBAEAlJ;gBAAA,kCACA;kBAAAe;kBAAA+G;gBAAA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAGA9H;gBAAA,kCACA;kBAAAe;kBAAA+G;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACA0B;MACA;QACA;QACAC,qDACAC;UACA1I;UACA2I;UACAZ;QAAA,GACA;;QAEA;QACA;UACAU;QACA;QAEA1J;QACAC;MACA;QACAA;MACA;IACA;IAEA;IACA4J;MACA;QACA;QACA;QAEA;UACAC;UACAA;;UAEA;UACAA;UAEA9J;UACAC;QACA;MACA;QACAA;MACA;IACA;IAIA;IACA8J;MACA;MACA;MACA;MACA;IACA;EACA;AACA;AAAA,2B;;;;;;;;;;;;;AC9jCA;AAAA;AAAA;AAAA;AAAm/B,CAAgB,68BAAG,EAAC,C;;;;;;;;;;;ACAvgC;AACA,OAAO,KAAU,EAAE,kBAKd","file":"pages/teacher-schedule/teacher-schedule.js","sourcesContent":["import 'uni-pages';\n// @ts-ignore\nwx.__webpack_require_UNI_MP_PLUGIN__ = __webpack_require__;import '@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js';\nimport Vue from 'vue'\nimport Page from './pages/teacher-schedule/teacher-schedule.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./teacher-schedule.vue?vue&type=template&id=1c0141c6&scoped=true&\"\nvar renderjs\nimport script from \"./teacher-schedule.vue?vue&type=script&lang=js&\"\nexport * from \"./teacher-schedule.vue?vue&type=script&lang=js&\"\nimport style0 from \"./teacher-schedule.vue?vue&type=style&index=0&id=1c0141c6&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1c0141c6\",\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"pages/teacher-schedule/teacher-schedule.vue\"\nexport default component.exports","export * from \"-!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--17-0!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/template.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./teacher-schedule.vue?vue&type=template&id=1c0141c6&scoped=true&\"","var components\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  var l1 =\n    _vm.selectedTeacher && !_vm.isLoading\n      ? _vm.__map(_vm.weekSchedule, function (day, idx) {\n          var $orig = _vm.__get_orig(day)\n          var m0 = _vm.formatDateWithWeek(day.course_date)\n          var l0 = _vm.__map(_vm.periods, function (i, __i0__) {\n            var $orig = _vm.__get_orig(i)\n            var m1 =\n              i === 5 || i === 6\n                ? _vm.getClassOptionIndex(day[\"course_slot_\" + i + \"_class\"])\n                : null\n            var m2 =\n              i === 5 || i === 6\n                ? _vm.getTypeIndex(day[\"course_slot_\" + i + \"_type\"])\n                : null\n            var m3 = !(i === 5 || i === 6)\n              ? _vm.getTypeIndex(day[\"course_slot_\" + i + \"_type\"])\n              : null\n            return {\n              $orig: $orig,\n              m1: m1,\n              m2: m2,\n              m3: m3,\n            }\n          })\n          return {\n            $orig: $orig,\n            m0: m0,\n            l0: l0,\n          }\n        })\n      : null\n  _vm.$mp.data = Object.assign(\n    {},\n    {\n      $root: {\n        l1: l1,\n      },\n    }\n  )\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./teacher-schedule.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./teacher-schedule.vue?vue&type=script&lang=js&\"","<template>\n  <view class=\"teacher-schedule-page\">\n    <!-- 固定返回按钮 -->\n    <view class=\"back-btn-fixed\">\n      <button class=\"back-btn\" @click=\"goHome\">\n        <text class=\"back-btn-icon\">🏠</text>\n      </button>\n    </view>\n    \n    <!-- <view style=\"font-size:32rpx;color:#1976D2;font-weight:bold;margin:40rpx 0 30rpx 0;text-align:center;\">这里是教师排课页面</view> -->\n    <view class=\"main-content\">\n        <view class=\"title-bar\">\n          <view class=\"page-title\">教师排课管理</view>\n        </view>\n\n        <view class=\"form-section card-bg\">\n          <view class=\"form-title\">搜索并选择教师</view>\n          <input class=\"search-input\" v-model.trim=\"searchKeyword\" placeholder=\"🔍 输入教师姓名\" />\n          <scroll-view scroll-y class=\"teacher-list-scroll\">\n            <view v-for=\"(teacher, idx) in filteredTeacherList\" :key=\"teacher.username\" class=\"teacher-item\" @click=\"selectTeacher(idx)\">\n              <text :class=\"['teacher-name', idx === teacherIndex ? 'selected' : '']\">{{ teacher.teacherName }}</text>\n            </view>\n          </scroll-view>\n        </view>\n\n        <view v-if=\"selectedTeacher\" class=\"card-bg courses-section\">\n          <view class=\"results-title\">{{ selectedTeacher.teacherName }} {{ weekTitle }}</view>\n          <view class=\"week-nav\">\n            <button class=\"week-btn\" @click=\"changeWeek(-1)\">上一周</button>\n            <text class=\"week-range\">{{ weekRangeText }}</text>\n            <button class=\"week-btn\" @click=\"changeWeek(1)\">下一周</button>\n          </view>\n          <view v-if=\"isLoading\" class=\"loading-text\">课程加载中...</view>\n          <view v-else>\n            <!-- 只保留每一天的详细排课，不再渲染多余的日期和星期 -->\n            <view v-for=\"(day, idx) in weekSchedule\" :key=\"day.course_date\" class=\"day-schedule-block\">\n              <view class=\"day-date\">{{ formatDateWithWeek(day.course_date) }}</view>\n              <view class=\"day-courses\">\n                <view v-for=\"i in periods\" :key=\"i\" class=\"course-row-vertical\">\n                  <view class=\"course-label-row\">\n                    {{ periodTimes[i-1] }}{{ (i === 5 || i === 6) ? '（习惯班）' : '' }}\n                  </view>\n                  <view class=\"course-inputs-row\">\n                    <!-- 第5和第6个时间段的特殊布局 -->\n                    <template v-if=\"i === 5 || i === 6\">\n                      <!-- 课程名输入框 -->\n                      <input :class=\"['course-input', day['course_slot_' + i] ? 'has-content' : '']\" v-model=\"day['course_slot_' + i]\" @focus=\"onInputFocus\" @input=\"onInputChange($event, idx, i, '')\" placeholder=\"课程名\" />\n                      <!-- 班级选择器 -->\n                      <picker class=\"class-picker\" @change=\"onClassOptionChange($event, idx, i)\" :value=\"getClassOptionIndex(day['course_slot_' + i + '_class'])\" :range=\"courseOptions\">\n                        <view class=\"class-display\">\n                          <text>{{ day['course_slot_' + i + '_class'] || '课程名' }}</text>\n                          <text class=\"class-arrow\">▼</text>\n                        </view>\n                      </picker>\n                      <!-- 教室输入框 -->\n                      <input :class=\"['course-input', 'location-input', day['course_slot_' + i + '_location'] ? 'has-content' : '']\" v-model=\"day['course_slot_' + i + '_location']\" @focus=\"onInputFocus\" @input=\"onInputChange($event, idx, i, 'location')\" placeholder=\"教室\" />\n                      <!-- 班型选择器 -->\n                      <picker class=\"type-picker\" @change=\"onTypeChange($event, idx, i)\" :value=\"getTypeIndex(day['course_slot_' + i + '_type'])\" :range=\"courseTypes\">\n                        <view class=\"type-display\">\n                          <text>{{ day['course_slot_' + i + '_type'] || '无' }}</text>\n                          <text class=\"type-arrow\">▼</text>\n                        </view>\n                      </picker>\n                    </template>\n                    <!-- 其他时间段的原有布局 -->\n                    <template v-else>\n                      <input :class=\"['course-input', day['course_slot_' + i] ? 'has-content' : '']\" v-model=\"day['course_slot_' + i]\" @focus=\"onInputFocus\" @input=\"onInputChange($event, idx, i, '')\" placeholder=\"课程名\" />\n                      <input :class=\"['course-input', 'class-input', day['course_slot_' + i + '_class'] ? 'has-content' : '']\" v-model=\"day['course_slot_' + i + '_class']\" @focus=\"onInputFocus\" @input=\"onInputChange($event, idx, i, 'class')\" placeholder=\"班级\" />\n                      <input :class=\"['course-input', 'location-input', day['course_slot_' + i + '_location'] ? 'has-content' : '']\" v-model=\"day['course_slot_' + i + '_location']\" @focus=\"onInputFocus\" @input=\"onInputChange($event, idx, i, 'location')\" placeholder=\"教室\" />\n                      <picker class=\"type-picker\" @change=\"onTypeChange($event, idx, i)\" :value=\"getTypeIndex(day['course_slot_' + i + '_type'])\" :range=\"courseTypes\">\n                        <view class=\"type-display\">\n                          <text>{{ day['course_slot_' + i + '_type'] || '无' }}</text>\n                          <text class=\"type-arrow\">▼</text>\n                        </view>\n                      </picker>\n                    </template>\n                  </view>\n                  <!-- 第5和第6个时间段不显示备注输入框 -->\n                  <template v-if=\"i !== 5 && i !== 6\">\n                    <view v-if=\"day['course_slot_' + i + '_remark']\" class=\"course-remark-show\">备注：{{ day['course_slot_' + i + '_remark'] }}</view>\n                    <view class=\"course-remark-row\">\n                      <input :class=\"['course-remark-input', day['course_slot_' + i + '_remark'] ? 'has-content' : '']\" v-model=\"day['course_slot_' + i + '_remark']\" @focus=\"onInputFocus\" @input=\"onInputChange($event, idx, i, 'remark')\" placeholder=\"备注（可选）\" />\n                    </view>\n                  </template>\n                </view>\n              </view>\n            </view>\n          </view>\n        </view>\n        <view class=\"save-btn-fixed\">\n          <button class=\"save-btn\" @click=\"saveSchedule\"><text class=\"icon\">💾</text>保存排课</button>\n        </view>\n    </view>\n  </view>\n</template>\n\n<script>\nimport { getCourseColor } from '../../utils/courseColor.js';\n\nfunction getMonday(date) {\n  const d = new Date(date)\n  // 始终返回本周一（周一到周日为一组），绝不包含上周日\n  d.setDate(d.getDate() - ((d.getDay() + 6) % 7));\n  d.setHours(0,0,0,0);\n  return d;\n}\nfunction formatDate(d) {\n  const year = d.getFullYear();\n  const month = (d.getMonth() + 1).toString().padStart(2, '0');\n  const day = d.getDate().toString().padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\nexport default {\n  data() {\n    return {\n      allTeacherList: [],\n      teacherIndex: -1,\n      searchKeyword: '',\n      selectedTeacher: null,\n      rawScheduleList: [], // Hold the raw schedule list from the cloud\n      weekSchedule: [], // This will hold the 7-day schedule for display and editing\n      isLoading: false,\n      weekOffset: 0,\n      initialScheduleState: '', // To check for changes\n      courseTypes: ['无', '一对一', '班课', '脱产生', '习惯班'],\n      courseOptions: ['一年级', '二年级', '三年级', '四年级', '五年级', '六年级', '七年级', '八年级', '九年级', '高一', '背诵'],\n      periods: [1, 2, 3, 4, 5, 6], // 节次数组\n      periodTimes: [\n        '8:00-10:00',\n        '10:10-12:10',\n        '14:00-16:00',\n        '16:10-18:10',\n        '18:00-20:00',\n        '20:00-22:00'\n      ],\n      weekDaysOrder: [1, 2, 3, 4, 5, 6, 0], // 周一到周日\n      currentDate: (function() {\n        const now = new Date();\n        now.setHours(0,0,0,0);\n        let dayOfWeek = now.getDay();\n        let day = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n        now.setDate(now.getDate() - day);\n        return now;\n      })(),\n    };\n  },\n  computed: {\n    filteredTeacherList() {\n      if (!this.searchKeyword) {\n        return this.allTeacherList;\n      }\n      return this.allTeacherList.filter(teacher =>\n        teacher.teacherName && teacher.teacherName.toLowerCase().includes(this.searchKeyword.toLowerCase())\n      );\n    },\n    weekTitle() {\n      return '这周课程';\n    },\n    weekRangeText() {\n      const monday = this.getMondayOfWeek();\n      const sunday = new Date(monday);\n      sunday.setDate(monday.getDate() + 6);\n      return `${formatDate(monday)} ~ ${formatDate(sunday)}`;\n    }\n  },\n  watch: {\n    weekSchedule: {\n      handler(newVal) {\n        // 当 weekSchedule 发生变化时，自动保存到缓存\n        if (this.selectedTeacher && newVal.length > 0) {\n          const teacherId = this.selectedTeacher._id;\n          const monday = this.getMondayOfWeek(this.currentDate);\n          const weekKey = formatDate(monday);\n          const cacheKey = 'teacherScheduleCache_' + teacherId + '_' + weekKey;\n          uni.setStorageSync(cacheKey, newVal);\n          console.log('数据已自动保存到缓存');\n        }\n      },\n      deep: true\n    }\n  },\n  onShow() {\n    console.log('📱 页面显示，开始初始化...');\n    \n    // 获取用户信息\n    const userInfo = uni.getStorageSync('userInfo');\n    let teacherId = '';\n    \n    // 检查是否有选中的教师\n    if (this.selectedTeacher && this.selectedTeacher._id) {\n      teacherId = this.selectedTeacher._id;\n      console.log('👤 使用已选中的教师ID:', teacherId);\n    } else if (userInfo && userInfo._id) {\n      teacherId = userInfo._id;\n      console.log('👤 使用当前用户ID作为教师ID:', teacherId);\n    }\n    \n    console.log('👤 当前教师ID:', teacherId);\n    \n    // 设置当前日期为本周一\n    this.currentDate = this.getMondayOfWeek(new Date());\n    const monday = this.currentDate;\n    const weekKey = formatDate(monday);\n    \n    console.log('📅 当前周:', weekKey);\n    \n    // 检查是否有缓存数据\n    const cacheKey = 'teacherScheduleCache_' + teacherId + '_' + weekKey;\n    const cached = uni.getStorageSync(cacheKey);\n    \n    if (cached && Array.isArray(cached) && cached.length === 7) {\n      console.log('📦 发现缓存数据，长度:', cached.length);\n      // 如果有缓存数据，先使用缓存，然后异步更新\n      this.weekSchedule = cached;\n      \n      // 异步获取最新数据\n      setTimeout(() => {\n        if (this.selectedTeacher) {\n          console.log('🔄 异步更新数据...');\n          this.fetchTeacherSchedule();\n        }\n      }, 100);\n    } else {\n      console.log('🆕 无缓存数据，构建新的周计划');\n      this.buildWeekSchedule();\n    }\n    \n    // 检查权限并获取教师列表\n    this.checkAdminRoleAndFetchTeachers();\n  },\n  onUnload() {\n    const fromService = uni.getStorageSync('fromService');\n    if (fromService) {\n      uni.switchTab({ url: '/pages/service/service' });\n      uni.removeStorageSync('fromService');\n    }\n  },\n  methods: {\n    checkAdminRoleAndFetchTeachers() {\n      const userInfo = uni.getStorageSync('userInfo');\n      const isAdmin = (userInfo && userInfo.role && userInfo.role.includes('管理员')) || userInfo.permission === '管理员';\n      const isSuperAdmin = userInfo && userInfo.permission === 'superadmin';\n      const hasScheduleFeature = userInfo && userInfo.featureList && userInfo.featureList.includes('schedule');\n      if (isAdmin || isSuperAdmin || hasScheduleFeature) {\n        this.fetchTeachers();\n      } else {\n        uni.showToast({ title: '无权限访问', icon: 'none' });\n        setTimeout(() => {\n          uni.reLaunch({ url: '/pages/home/home' });\n        }, 1200);\n        return;\n      }\n    },\n    fetchTeachers() {\n      uniCloud.callFunction({\n        name: 'user-center',\n        data: { action: 'get-accounts' },\n        success: async (res) => {\n          const result = res.result;\n          if (result.code === 200 && result.data) {\n            // Also filter for users with the '教师' role here\n            this.allTeacherList = result.data.filter(acc => acc.role && acc.role.includes('教师'));\n            \n            // 为每个教师获取openid信息\n            await this.enrichTeachersWithOpenid();\n            \n             if (this.allTeacherList.length > 0) {\n                this.selectTeacher(0);\n            } else {\n\t\t\t\tuni.showToast({ title: '暂无教师信息', icon: 'none' });\n\t\t\t}\n          } else {\n            uni.showToast({ title: '获取教师列表失败: ' + (result.message || '未知错误'), icon: 'none' });\n          }\n        },\n        fail: (err) => {\n          uni.showToast({ title: '获取教师列表请求失败', icon: 'none' });\n        }\n      });\n    },\n    \n    // 为教师列表补充openid信息\n    async enrichTeachersWithOpenid() {\n      try {\n        console.log('🔍 开始补充教师openid信息...');\n        \n        for (let i = 0; i < this.allTeacherList.length; i++) {\n          const teacher = this.allTeacherList[i];\n          try {\n            // 调用云函数获取用户详细信息（包含openid）\n            const userResult = await uniCloud.callFunction({\n              name: 'user-center',\n              data: {\n                action: 'get-user-detail',\n                params: { userId: teacher._id }\n              }\n            });\n            \n            if (userResult.result && userResult.result.code === 200) {\n              const userDetail = userResult.result.data;\n              if (userDetail.openid) {\n                this.allTeacherList[i].openid = userDetail.openid;\n                console.log(`✅ 教师 ${teacher.teacherName || teacher.username} openid 获取成功`);\n              } else {\n                console.log(`⚠️ 教师 ${teacher.teacherName || teacher.username} 没有openid`);\n              }\n            }\n          } catch (error) {\n            console.error(`❌ 获取教师 ${teacher.teacherName || teacher.username} openid 失败:`, error);\n          }\n        }\n        \n        console.log('✅ 教师openid信息补充完成');\n      } catch (error) {\n        console.error('❌ 补充教师openid信息失败:', error);\n      }\n    },\n    selectTeacher(idx) {\n      console.log('👤 选择教师，索引:', idx);\n      this.teacherIndex = idx;\n      this.selectedTeacher = this.filteredTeacherList[idx];\n      console.log('选中的教师:', this.selectedTeacher);\n      \n      // 重置当前日期为本周一\n      this.currentDate = this.getMondayOfWeek(new Date());\n      \n      // 清空之前的数据和缓存\n      this.rawScheduleList = [];\n      this.weekSchedule = [];\n      this.initialScheduleState = '';\n      \n      console.log('🔄 开始获取选中教师的课表...');\n      this.fetchTeacherSchedule();\n    },\n    fetchTeacherSchedule() {\n      if (!this.selectedTeacher) return;\n      this.isLoading = true;\n      \n      // 确保使用正确的教师ID\n      const teacherId = this.selectedTeacher._id;\n      const monday = this.getMondayOfWeek();\n      const sunday = new Date( monday );\n      sunday.setDate(monday.getDate() + 6);\n      \n      console.log('🔍 开始获取教师课表数据...');\n      console.log('选中的教师:', this.selectedTeacher);\n      console.log('教师ID:', teacherId);\n      console.log('查询日期范围:', formatDate(monday), '到', formatDate(sunday));\n      \n      uniCloud.callFunction({\n        name: 'schedule-center',\n        data: {\n          action: 'getSchedulesByTeacher',\n          params: {\n            teacher_id: teacherId,\n            startDate: formatDate(monday),\n            endDate: formatDate(sunday)\n          }\n        },\n        success: (res) => {\n          console.log('📡 云函数返回结果:', res);\n          const result = res.result;\n          if (result.code === 200 && result.data) {\n            console.log('✅ 获取课表数据成功，数据条数:', result.data.length);\n            console.log('原始数据:', result.data);\n            this.rawScheduleList = result.data;\n            \n            // 强制重新构建周计划，不使用缓存\n            this.buildWeekSchedule();\n            \n            // 保存到缓存（用于后续编辑）\n            const weekKey = formatDate(monday);\n            const cacheKey = 'teacherScheduleCache_' + teacherId + '_' + weekKey;\n            uni.setStorageSync(cacheKey, this.weekSchedule);\n            console.log('✅ 新数据已保存到缓存');\n          } else {\n            console.error('❌ 获取课表数据失败:', result.message || '未知错误');\n            this.rawScheduleList = [];\n            this.buildWeekSchedule();\n          }\n        },\n        fail: (err) => {\n          console.error('❌ 请求失败:', err);\n          this.rawScheduleList = [];\n          this.buildWeekSchedule();\n        },\n        complete: () => {\n          this.isLoading = false;\n          console.log('🏁 课表获取完成');\n        }\n      });\n    },\n    buildWeekSchedule() {\n      // 强制 currentDate 归到本周一\n      this.currentDate = this.getMondayOfWeek(this.currentDate);\n      const monday = this.currentDate;\n      console.log('🔨 开始构建周计划...');\n      console.log('当前日期:', this.currentDate);\n      console.log('周一日期:', monday);\n      console.log('原始数据列表:', this.rawScheduleList);\n      \n      this.weekSchedule = [];\n      const newWeekSchedule = [];\n      \n      for (let i = 0; i < 7; i++) {\n        const d = new Date(monday.getTime() + i * 24 * 60 * 60 * 1000);\n        const dateStr = formatDate(d);\n        console.log(`📅 处理第${i}天，日期: ${dateStr}`);\n        \n        let daySchedule = {\n          course_date: dateStr,\n          course_slot_1: '', course_slot_1_type: '无', course_slot_1_class: '', course_slot_1_location: '', course_slot_1_remark: '',\n          course_slot_2: '', course_slot_2_type: '无', course_slot_2_class: '', course_slot_2_location: '', course_slot_2_remark: '',\n          course_slot_3: '', course_slot_3_type: '无', course_slot_3_class: '', course_slot_3_location: '', course_slot_3_remark: '',\n          course_slot_4: '', course_slot_4_type: '无', course_slot_4_class: '', course_slot_4_location: '', course_slot_4_remark: '',\n          course_slot_5: '', course_slot_5_type: '无', course_slot_5_class: '', course_slot_5_location: '', course_slot_5_remark: '',\n          course_slot_6: '', course_slot_6_type: '无', course_slot_6_class: '', course_slot_6_location: '', course_slot_6_remark: '',\n        };\n        \n        // 查找当天的课程数据\n        const coursesForDay = this.rawScheduleList.filter(course => {\n          let courseDate = course.date;\n          if (typeof courseDate === 'string' && courseDate.length >= 10) {\n            courseDate = courseDate.slice(0, 10);\n          } else if (courseDate instanceof Date) {\n            courseDate = formatDate(courseDate);\n          }\n          const isMatch = courseDate === dateStr;\n          console.log(`  课程日期: ${courseDate}, 匹配: ${isMatch}`);\n          return isMatch;\n        });\n        \n        console.log(`  找到 ${coursesForDay.length} 门课程`);\n        \n        // 将课程数据映射到对应的时间段\n        coursesForDay.forEach(course => {\n          console.log(`  📚 处理课程: ${course.course_name}, 时间段: ${course.start_period}`);\n          \n          if (course.start_period < 1 || course.start_period > 6) {\n            console.log(`    ⚠️ 时间段超出范围: ${course.start_period}`);\n            return;\n          }\n          \n          const slotIndex = course.start_period;\n          if (slotIndex >= 1 && slotIndex <= 6) {\n            daySchedule[`course_slot_${slotIndex}`] = course.course_name || '';\n            daySchedule[`course_slot_${slotIndex}_type`] = course.course_type || '无';\n            daySchedule[`course_slot_${slotIndex}_class`] = course.class_name || '';\n            daySchedule[`course_slot_${slotIndex}_location`] = course.location || '';\n            daySchedule[`course_slot_${slotIndex}_remark`] = course.remark || '';\n            \n            console.log(`    ✅ 已映射到第${slotIndex}节课:`, {\n              课程名: course.course_name,\n              类型: course.course_type,\n              班级: course.class_name,\n              教室: course.location,\n              备注: course.remark\n            });\n          }\n        });\n        \n        newWeekSchedule.push(daySchedule);\n        console.log(`  📋 第${i}天课表:`, daySchedule);\n      }\n      \n      this.weekSchedule = newWeekSchedule;\n      this.initialScheduleState = JSON.stringify(this.weekSchedule);\n      \n      console.log('🎯 周计划构建完成:');\n      console.log('日期列表:', this.weekSchedule.map(d => d.course_date));\n      console.log('第一天数据结构:', this.weekSchedule[0]);\n      \n      // 强制更新视图\n      this.$forceUpdate();\n    },\n    getMondayOfWeek(date = this.currentDate) {\n      const now = new Date(date);\n      now.setHours(0,0,0,0);\n      let dayOfWeek = now.getDay();\n      let day = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n      now.setDate(now.getDate() - day);\n      return now;\n    },\n    onInputChange(event, dayIndex, slot, field) {\n      const key = field ? `course_slot_${slot}_${field}` : `course_slot_${slot}`;\n      const value = event.detail.value;\n      console.log('输入事件触发:', { dayIndex, slot, field, value, event: event });\n      \n      // 直接更新数据\n      if (this.weekSchedule[dayIndex]) {\n        this.weekSchedule[dayIndex][key] = value;\n        console.log('数据已更新:', { dayIndex, slot, field, value, key });\n        \n        // 立即保存到缓存\n        const teacherId = this.selectedTeacher ? this.selectedTeacher._id : '';\n        const monday = this.getMondayOfWeek(this.currentDate);\n        const weekKey = formatDate(monday);\n        const cacheKey = 'teacherScheduleCache_' + teacherId + '_' + weekKey;\n        uni.setStorageSync(cacheKey, this.weekSchedule);\n        console.log('数据已保存到缓存');\n      }\n    },\n    onTypeChange(event, dayIndex, slot) {\n      if (this.weekSchedule[dayIndex]) {\n        this.weekSchedule[dayIndex][`course_slot_${slot}_type`] = this.courseTypes[event.detail.value];\n        console.log('类型变化:', { dayIndex, slot, value: this.courseTypes[event.detail.value] });\n        // 缓存\n        const teacherId = this.selectedTeacher ? this.selectedTeacher._id : '';\n        const monday = this.getMondayOfWeek(this.currentDate);\n        const weekKey = formatDate(monday);\n        const cacheKey = 'teacherScheduleCache_' + teacherId + '_' + weekKey;\n        uni.setStorageSync(cacheKey, this.weekSchedule);\n      }\n    },\n    getTypeIndex(type) {\n      return this.courseTypes.indexOf(type);\n    },\n    getCourseOptionIndex(option) {\n      return this.courseOptions.indexOf(option);\n    },\n    getClassOptionIndex(option) {\n      return this.courseOptions.indexOf(option);\n    },\n    onCourseOptionChange(event, dayIndex, slot) {\n      if (this.weekSchedule[dayIndex]) {\n        this.weekSchedule[dayIndex][`course_slot_${slot}`] = this.courseOptions[event.detail.value];\n        console.log('课程选项变化:', { dayIndex, slot, value: this.courseOptions[event.detail.value] });\n        // 缓存\n        const teacherId = this.selectedTeacher ? this.selectedTeacher._id : '';\n        const monday = this.getMondayOfWeek(this.currentDate);\n        const weekKey = formatDate(monday);\n        const cacheKey = 'teacherScheduleCache_' + teacherId + '_' + weekKey;\n        uni.setStorageSync(cacheKey, this.weekSchedule);\n      }\n    },\n    onClassOptionChange(event, dayIndex, slot) {\n      if (this.weekSchedule[dayIndex]) {\n        const selectedValue = this.courseOptions[event.detail.value];\n        this.weekSchedule[dayIndex][`course_slot_${slot}_class`] = selectedValue;\n        \n        // 每次选择第二个输入框时，都自动更新第一个输入框的内容\n        this.weekSchedule[dayIndex][`course_slot_${slot}`] = selectedValue;\n        \n        console.log('班级选项变化:', { dayIndex, slot, value: selectedValue });\n        // 缓存\n        const teacherId = this.selectedTeacher ? this.selectedTeacher._id : '';\n        const monday = this.getMondayOfWeek(this.currentDate);\n        const weekKey = formatDate(monday);\n        const cacheKey = 'teacherScheduleCache_' + teacherId + '_' + weekKey;\n        uni.setStorageSync(cacheKey, this.weekSchedule);\n      }\n    },\n    changeWeek(offset) {\n      console.log('📅 切换周，偏移量:', offset);\n      const monday = this.getMondayOfWeek(this.currentDate);\n      monday.setDate(monday.getDate() + offset * 7);\n      this.currentDate = monday;\n      \n      console.log('新的当前日期:', this.currentDate);\n      \n      // 清空当前数据\n      this.rawScheduleList = [];\n      this.weekSchedule = [];\n      \n      // 检查是否有缓存数据\n      const teacherId = this.selectedTeacher ? this.selectedTeacher._id : '';\n      const weekKey = formatDate(monday);\n      const cacheKey = 'teacherScheduleCache_' + teacherId + '_' + weekKey;\n      const cached = uni.getStorageSync(cacheKey);\n      \n      if (cached && Array.isArray(cached) && cached.length === 7) {\n        console.log('📦 发现缓存数据，长度:', cached.length);\n        this.weekSchedule = cached;\n        \n        // 异步获取最新数据\n        setTimeout(() => {\n          if (this.selectedTeacher) {\n            console.log('🔄 异步更新数据...');\n            this.fetchTeacherSchedule();\n          }\n        }, 100);\n      } else {\n        console.log('🆕 无缓存数据，重新获取数据');\n        if (this.selectedTeacher) {\n          this.fetchTeacherSchedule();\n        } else {\n          this.buildWeekSchedule();\n        }\n      }\n    },\n    saveSchedule() {\n      const changes = this.weekSchedule.map(day => ({\n        ...day,\n        teacher_id: this.selectedTeacher._id,\n        uid: this.selectedTeacher._id, // 确保uid也被传递\n        username: this.selectedTeacher.username\n      }));\n\n      // 获取当前用户信息作为管理员\n      const userInfo = uni.getStorageSync('userInfo');\n      const adminName = userInfo.realName || userInfo.username || '管理员';\n\n      uniCloud.callFunction({\n        name: 'schedule-center',\n        data: {\n          action: 'updateSchedules',\n          params: { \n            schedules: changes,\n            adminName: adminName\n          }\n        },\n        success: async (res) => {\n          if (res.result.code === 200) {\n            uni.showToast({ title: '排课保存成功!', icon: 'success' });\n            \n            // 保存最新 weekSchedule 到缓存\n            const teacherId = this.selectedTeacher ? this.selectedTeacher._id : '';\n            const monday = this.getMondayOfWeek(this.currentDate);\n            const weekKey = formatDate(monday);\n            const cacheKey = 'teacherScheduleCache_' + teacherId + '_' + weekKey;\n            uni.setStorageSync(cacheKey, this.weekSchedule);\n            \n            // 发送订阅消息通知\n            await this.sendScheduleNotifications(changes);\n            \n            this.fetchTeacherSchedule();\n          } else {\n            uni.showToast({ title: '保存失败: ' + res.result.message, icon: 'none' });\n          }\n        },\n        fail: (err) => {\n          uni.showToast({ title: '保存请求失败', icon: 'none' });\n        }\n      });\n    },\n    \n    // 发送排课订阅消息通知 - 只发送最新排课的课程通知\n    async sendScheduleNotifications(schedules) {\n      try {\n        console.log('开始发送排课订阅消息通知...');\n        \n        // 获取当前选中的教师ID\n        const currentTeacherId = this.selectedTeacher._id;\n        \n        // 找到最新排课的课程（根据日期和时间段排序，找到最晚的课程）\n        let latestCourse = null;\n        let latestCourseInfo = null;\n        let latestDateTime = null;\n        \n        // 遍历所有排课数据，找到最晚的课程\n        for (const schedule of schedules) {\n          const { course_date, uid, username } = schedule;\n          \n          // 只处理当前选中教师的课程\n          if (uid !== currentTeacherId) {\n            console.log(`跳过非当前教师的课程: ${uid} vs ${currentTeacherId}`);\n            continue;\n          }\n          \n          // 检查每节课是否有课程数据\n          for (let j = 1; j <= 6; j++) {\n            const courseKey = `course_slot_${j}`;\n            const typeKey = `course_slot_${j}_type`;\n            const classKey = `course_slot_${j}_class`;\n            const locationKey = `course_slot_${j}_location`;\n            \n            const courseName = schedule[courseKey];\n            const courseType = schedule[typeKey];\n            const className = schedule[classKey];\n            const location = schedule[locationKey];\n            \n            // 如果找到有课程数据的节次，计算日期时间并比较\n            if (courseName && courseName.trim() !== '') {\n              // 计算这节课的具体时间\n              const courseDateTime = new Date(`${course_date} ${this.getSlotStartTime(j)}`);\n              \n              // 如果这个课程时间更晚，更新为最新课程\n              if (!latestDateTime || courseDateTime > latestDateTime) {\n                latestDateTime = courseDateTime;\n                latestCourse = schedule;\n                latestCourseInfo = {\n                  courseName,\n                  courseType,\n                  className,\n                  location,\n                  date: course_date,\n                  slot: j\n                };\n                console.log(`找到更晚的课程:`, latestCourseInfo, `时间:`, courseDateTime);\n              }\n            }\n          }\n        }\n        \n        // 如果找到了最新课程，只发送这一条订阅消息\n        if (latestCourse && latestCourseInfo) {\n          console.log(`准备发送最新排课课程的订阅消息:`, latestCourseInfo);\n          \n          // 检查 openid 信息\n          const teacherOpenid = this.selectedTeacher.openid || '';\n          console.log('教师openid信息:', {\n            teacherId: this.selectedTeacher._id,\n            teacherName: this.selectedTeacher.teacherName || this.selectedTeacher.username,\n            openid: teacherOpenid,\n            hasOpenid: !!teacherOpenid,\n            openidType: teacherOpenid ? (teacherOpenid.startsWith('mock_') ? '测试模式' : teacherOpenid.startsWith('temp_') ? '临时模式' : '真实openid') : '无openid'\n          });\n          \n          if (!teacherOpenid) {\n            console.log(`⚠️ 教师 ${this.selectedTeacher.teacherName || this.selectedTeacher.username} 没有openid，跳过订阅消息发送`);\n            return;\n          }\n          \n          if (teacherOpenid.startsWith('mock_') || teacherOpenid.startsWith('temp_')) {\n            console.log(`⚠️ 教师 ${this.selectedTeacher.teacherName || this.selectedTeacher.username} 使用测试openid: ${teacherOpenid}，跳过订阅消息发送`);\n            return;\n          }\n          \n          // 调用订阅消息云函数\n          try {\n            // 先检查是否有会话订阅\n            const hasSessionSubscription = this.checkSessionSubscription(teacherOpenid);\n            \n            if (hasSessionSubscription) {\n              console.log('✅ 使用会话订阅发送排课通知，避免微信API限制');\n              \n              // 使用会话订阅发送（模拟发送）\n              const sessionResult = await this.sendScheduleNotificationWithSession({\n                ...latestCourseInfo,\n                openid: teacherOpenid\n              });\n              \n              if (sessionResult.success) {\n                console.log(`最新排课课程会话订阅消息发送成功: ${latestCourseInfo.courseName}`);\n              } else {\n                console.log(`会话订阅消息发送失败: ${sessionResult.error}`);\n              }\n            } else {\n              console.log('📱 使用微信API发送订阅消息');\n              \n              // 使用传统微信API发送\n              const subscriptionResult = await uniCloud.callFunction({\n                name: 'subscription-message',\n                data: {\n                  action: 'send-schedule-notification',\n                  openid: this.selectedTeacher.openid || '',\n                  courseName: latestCourseInfo.courseName,\n                  classTime: this.formatClassTime(latestCourseInfo.date, latestCourseInfo.slot),\n                  remark: (latestCourseInfo.location || '未指定') + '教室',  // 自动加上\"教室\"两个字\n                  studentName: latestCourseInfo.courseType || '未指定类型',\n                  page: 'pages/schedule-tab/schedule-tab'\n                }\n              });\n              \n              if (subscriptionResult.result && subscriptionResult.result.code === 200) {\n                console.log(`最新排课课程订阅消息发送成功: ${latestCourseInfo.courseName}`);\n              } else {\n                const errorDetail = subscriptionResult.result && subscriptionResult.result.error ? subscriptionResult.result.error : '';\n                console.log(`最新排课课程订阅消息发送失败:`, {\n                  message: subscriptionResult.result && subscriptionResult.result.message ? subscriptionResult.result.message : '',\n                  error: errorDetail,\n                  code: subscriptionResult.result && subscriptionResult.result.code ? subscriptionResult.result.code : ''\n                });\n                \n                // 检查是否是43101错误（用户拒绝接收）\n                if (errorDetail && errorDetail.includes('43101')) {\n                  console.log(`⚠️ 课程 \"${latestCourseInfo.courseName}\" 订阅消息被用户拒绝，需要重新授权`);\n                  \n                  // 尝试创建会话订阅，避免后续错误\n                  this.createSessionSubscriptionForTeacher(teacherOpenid);\n                }\n              }\n            }\n          } catch (subscriptionError) {\n            console.error(`最新排课课程订阅消息发送失败:`, subscriptionError);\n          }\n        } else {\n          console.log('未找到需要发送订阅消息的课程');\n        }\n        \n        console.log('排课订阅消息通知发送完成');\n      } catch (error) {\n        console.error('发送排课订阅消息通知失败:', error);\n      }\n    },\n    \n    // 获取指定时间段的开始时间\n    getSlotStartTime(slotIndex) {\n      const periodStartTimes = [\n        '08:00',  // 第1节课 8:00-10:00\n        '10:10',  // 第2节课 10:10-12:10\n        '14:00',  // 第3节课 14:00-16:00\n        '16:10',  // 第4节课 16:10-18:10\n        '18:00',  // 第5节课 18:00-20:00\n        '20:00'   // 第6节课 20:00-22:00\n      ];\n      \n      return periodStartTimes[slotIndex - 1] || '08:00';\n    },\n    \n    // 格式化上课时间 - 修复为微信订阅消息要求的标准格式\n    formatClassTime(dateStr, slotIndex) {\n      const dateObj = new Date(dateStr);\n      \n      // 微信订阅消息要求：YYYY-MM-DD HH:mm 格式\n      const year = dateObj.getFullYear();\n      const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');\n      const day = dateObj.getDate().toString().padStart(2, '0');\n      \n      // 时间段对应的开始时间\n      const periodStartTimes = [\n        '08:00',  // 第1节课 8:00-10:00\n        '10:10',  // 第2节课 10:10-12:10\n        '14:00',  // 第3节课 14:00-16:00\n        '16:10',  // 第4节课 16:10-18:10\n        '18:00',  // 第5节课 18:00-20:00\n        '20:00'   // 第6节课 20:00-22:00\n      ];\n      \n      const startTime = periodStartTimes[slotIndex - 1] || '08:00';\n      \n      // 返回标准格式：YYYY-MM-DD HH:mm\n      return `${year}-${month}-${day} ${startTime}`;\n    },\n    getDayOfWeek(dateStr) {\n      const dayNames = ['周日','周一', '周二', '周三', '周四', '周五', '周六'];\n      const dayIndex = new Date(dateStr).getDay();\n      return dayNames[dayIndex];\n    },\n    getDayOfWeekIndex(dateStr) {\n      return new Date(dateStr).getDay();\n    },\n    getCourseColor(type, className) {\n      return getCourseColor(type, className);\n    },\n    goHome() {\n      uni.switchTab({ url: '/pages/service/service' });\n    },\n    returnToCurrentWeek() {\n      this.currentDate = this.getMondayOfWeek(new Date());\n      this.buildWeekSchedule();\n    },\n    formatDateWithWeek(dateStr) {\n      if (!dateStr) return '';\n      const date = new Date(dateStr);\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const day = date.getDate().toString().padStart(2, '0');\n      const weekNames = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];\n      const week = weekNames[date.getDay()];\n      return `${year}-${month}-${day} ${week}`;\n    },\n    onInputFocus(event) {\n      console.log('输入框获得焦点:', event);\n      // 在微信小程序中，不需要手动调用focus方法\n      // 输入框已经自动获得焦点\n    },\n    \n    // 检查教师是否有会话订阅\n    checkSessionSubscription(openid) {\n      try {\n        // 检查本地存储中是否有该openid的会话订阅\n        const sessionKey = `session_subscription_${openid}`;\n        const sessionData = uni.getStorageSync(sessionKey);\n        \n        if (sessionData && sessionData.isValid) {\n          const now = Date.now();\n          if (now < sessionData.expireTime) {\n            console.log('✅ 找到有效的会话订阅');\n            return true;\n          } else {\n            console.log('⚠️ 会话订阅已过期');\n            return false;\n          }\n        }\n        \n        return false;\n      } catch (error) {\n        console.error('检查会话订阅失败:', error);\n        return false;\n      }\n    },\n    \n    // 为教师创建会话订阅\n    createSessionSubscriptionForTeacher(openid) {\n      try {\n        const sessionKey = `session_subscription_${openid}`;\n        const sessionData = {\n          isValid: true,\n          createTime: Date.now(),\n          expireTime: Date.now() + (24 * 60 * 60 * 1000), // 24小时\n          usageCount: 0,\n          openid: openid,\n          type: 'teacher_schedule'\n        };\n        \n        uni.setStorageSync(sessionKey, sessionData);\n        console.log('🔐 为教师创建会话订阅成功:', sessionData);\n        \n        return true;\n      } catch (error) {\n        console.error('创建教师会话订阅失败:', error);\n        return false;\n      }\n    },\n    \n    // 使用会话订阅发送排课通知\n    async sendScheduleNotificationWithSession(courseInfo) {\n      try {\n        console.log('🔐 使用会话订阅发送排课通知...');\n        console.log('📤 发送参数:', {\n          openid: courseInfo.openid,\n          courseName: courseInfo.courseName,\n          classTime: this.formatClassTime(courseInfo.date, courseInfo.slot),\n          remark: (courseInfo.location || '未指定') + '教室',\n          studentName: courseInfo.courseType || '未指定类型',\n          isSessionSubscription: true\n        });\n        \n        // 使用会话订阅发送，但仍然调用微信API\n        // 这样可以避免微信的\"一次授权只能使用一次\"限制\n        const subscriptionResult = await uniCloud.callFunction({\n          name: 'subscription-message',\n          data: {\n            action: 'send-schedule-notification',\n            openid: courseInfo.openid,\n            courseName: courseInfo.courseName,\n            classTime: this.formatClassTime(courseInfo.date, courseInfo.slot),\n            remark: (courseInfo.location || '未指定') + '教室',\n            studentName: courseInfo.courseType || '未指定类型',\n            page: 'pages/schedule-tab/schedule-tab',\n            isSessionSubscription: true  // 标识这是会话订阅\n          }\n        });\n        \n        console.log('📥 云函数返回结果:', subscriptionResult);\n        \n        if (subscriptionResult.result && subscriptionResult.result.code === 200) {\n          console.log('✅ 会话订阅消息发送成功');\n          console.log('📊 返回数据:', subscriptionResult.result.data);\n          \n          // 检查是否是会话订阅特殊策略处理\n          const method = subscriptionResult.result.data && subscriptionResult.result.data.method;\n          if (method === 'session_subscription_bypass') {\n            console.log('🎯 使用会话订阅特殊策略处理成功');\n            \n            // 显示会话订阅模式说明\n            uni.showModal({\n              title: '会话订阅模式',\n              content: '您的订阅消息已通过会话订阅模式处理成功！\\n\\n特点：\\n• 无需重复授权\\n• 可以无限次使用\\n• 消息记录完整\\n• 避免微信限制\\n\\n注意：这是会话订阅模式，消息会记录但不会重复发送微信通知。',\n              showCancel: false,\n              confirmText: '明白了'\n            });\n          }\n          \n          // 记录到本地日志\n          this.logSessionScheduleMessage(courseInfo, subscriptionResult.result);\n          \n          // 更新会话使用次数\n          this.updateSessionUsage(courseInfo.openid);\n          \n          return { success: true, data: subscriptionResult.result };\n        } else {\n          console.log('❌ 会话订阅消息发送失败:', subscriptionResult.result && subscriptionResult.result.message ? subscriptionResult.result.message : '未知错误');\n          console.log('🔍 详细错误信息:', subscriptionResult.result);\n          \n          // 检查是否是43101错误，如果是，提示用户重新授权\n          const errorDetail = subscriptionResult.result && subscriptionResult.result.error ? subscriptionResult.result.error : '';\n          if (errorDetail && errorDetail.includes('43101')) {\n            console.log('⚠️ 检测到43101错误，用户需要重新授权订阅消息');\n            \n            // 显示重新授权提示\n            uni.showModal({\n              title: '订阅消息发送失败',\n              content: '您的订阅消息授权已失效，需要重新授权才能接收通知。\\n\\n建议：\\n1. 进入\"订阅设置\"页面\\n2. 重新开启订阅开关\\n3. 完成微信授权',\n              showCancel: true,\n              cancelText: '稍后处理',\n              confirmText: '去设置',\n              success: (res) => {\n                if (res.confirm) {\n                  // 跳转到订阅设置页面\n                  uni.navigateTo({\n                    url: '/pages/subscription-settings/subscription-settings'\n                  });\n                }\n              }\n            });\n          }\n          \n          // 如果发送失败，尝试降级到传统方式\n          return await this.fallbackToTraditionalSubscription(courseInfo);\n        }\n      } catch (error) {\n        console.error('会话订阅发送排课通知失败:', error);\n        \n        // 如果出错，尝试降级到传统方式\n        return await this.fallbackToTraditionalSubscription(courseInfo);\n      }\n    },\n    \n    // 降级到传统订阅方式\n    async fallbackToTraditionalSubscription(courseInfo) {\n      try {\n        console.log('🔄 降级到传统订阅方式...');\n        \n        const subscriptionResult = await uniCloud.callFunction({\n          name: 'subscription-message',\n          data: {\n            action: 'send-schedule-notification',\n            openid: courseInfo.openid,\n            courseName: courseInfo.courseName,\n            classTime: this.formatClassTime(courseInfo.date, courseInfo.slot),\n            remark: (courseInfo.location || '未指定') + '教室',\n            studentName: courseInfo.courseType || '未指定类型',\n            page: 'pages/schedule-tab/schedule-tab',\n            isSessionSubscription: false  // 标识这是传统订阅方式\n          }\n        });\n        \n        if (subscriptionResult.result && subscriptionResult.result.code === 200) {\n          console.log('✅ 传统订阅方式发送成功');\n          return { success: true, data: subscriptionResult.result, method: 'traditional' };\n        } else {\n          console.log('❌ 传统订阅方式也失败:', subscriptionResult.result && subscriptionResult.result.message ? subscriptionResult.result.message : '未知错误');\n          return { success: false, error: subscriptionResult.result && subscriptionResult.result.message ? subscriptionResult.result.message : '发送失败' };\n        }\n      } catch (error) {\n        console.error('传统订阅方式失败:', error);\n        return { success: false, error: error.message };\n      }\n    },\n    \n    // 记录会话排课消息日志\n    logSessionScheduleMessage(courseInfo, result) {\n      try {\n        const sessionMessages = uni.getStorageSync('session_schedule_messages') || [];\n        sessionMessages.push({\n          ...courseInfo,\n          result: result,\n          timestamp: Date.now(),\n          type: 'schedule_notification'\n        });\n        \n        // 只保留最近100条记录\n        if (sessionMessages.length > 100) {\n          sessionMessages.splice(0, sessionMessages.length - 100);\n        }\n        \n        uni.setStorageSync('session_schedule_messages', sessionMessages);\n        console.log('📝 会话排课消息已记录到本地日志');\n      } catch (error) {\n        console.error('记录会话排课消息失败:', error);\n      }\n    },\n    \n    // 更新会话使用次数\n    updateSessionUsage(openid) {\n      try {\n        const sessionKey = `session_subscription_${openid}`;\n        const sessionData = uni.getStorageSync(sessionKey);\n        \n        if (sessionData) {\n          sessionData.usageCount = (sessionData.usageCount || 0) + 1;\n          sessionData.lastUsageTime = Date.now();\n          \n          // 延长有效期\n          sessionData.expireTime = Date.now() + (24 * 60 * 60 * 1000);\n          \n          uni.setStorageSync(sessionKey, sessionData);\n          console.log(`📊 教师会话订阅使用次数: ${sessionData.usageCount}`);\n        }\n      } catch (error) {\n        console.error('更新会话使用次数失败:', error);\n      }\n    },\n\n\n\n    // 格式化日期为 YYYY-MM-DD 格式\n    formatDate(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.teacher-schedule-page {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: #f4f6f8;\n}\n\n.title-bar {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20rpx;\n}\n\n\n\n/* New styles for fixed back button */\n.back-btn-fixed {\n  position: fixed;\n  top: calc(env(safe-area-inset-top) + 80rpx);\n  left: 30rpx;\n  z-index: 1000;\n  pointer-events: auto;\n}\n\n.back-btn {\n  background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); /* 修改为与保存按钮相同的蓝紫色渐变 */\n  border-radius: 50%;\n  width: 120rpx;\n  height: 120rpx;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0 8rpx 32rpx rgba(102,126,234,0.18), 0 2rpx 8rpx rgba(118,75,162,0.10);\n  border: none;\n  color: white; /* 添加白色文字颜色 */\n  transition: transform 0.1s, box-shadow 0.1s;\n}\n\n.back-btn:active {\n  transform: scale(0.97);\n  box-shadow: 0 2rpx 8rpx rgba(102,126,234,0.10);\n}\n\n.back-btn-icon {\n  font-size: 60rpx;\n}\n\n.page-title {\n  font-size: 48rpx;\n  font-weight: bold;\n  color: #333;\n  text-align: center;\n  width: 100%;\n}\n\n.main-content {\n  padding: calc(env(safe-area-inset-top) + 150rpx) 30rpx 30rpx;\n  padding-bottom: calc(30rpx + 150rpx); /* 增加底部边距，为保存按钮留出空间 */\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 30rpx;\n}\n\n.card-bg {\n  background: #fff;\n  border-radius: 20rpx;\n  box-shadow: 0 4rpx 20rpx rgba(0,0,0,0.05);\n  padding: 30rpx;\n}\n\n.form-section {\n  display: flex;\n  flex-direction: column;\n}\n\n.form-title {\n  font-size: 32rpx;\n  font-weight: bold;\n  color: #333;\n  margin-bottom: 20rpx;\n}\n\n.search-input {\n  background-color: #f4f6f8;\n  border-radius: 15rpx;\n  padding: 20rpx;\n  font-size: 28rpx;\n  margin-bottom: 20rpx;\n}\n\n.teacher-list-scroll {\n  height: 180rpx;\n  border: 1rpx solid #eee;\n  border-radius: 15rpx;\n}\n\n.teacher-item {\n  padding: 25rpx;\n  border-bottom: 1rpx solid #eee;\n}\n.teacher-item:last-child {\n  border-bottom: none;\n}\n.teacher-name {\n  font-size: 30rpx;\n  color: #555;\n}\n.teacher-name.selected {\n  color: #667eea;\n  font-weight: bold;\n}\n.courses-section {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.results-title {\n  font-size: 32rpx;\n  font-weight: bold;\n  margin-bottom: 20rpx;\n}\n\n.week-nav {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 30rpx;\n  padding: 0 20rpx;\n}\n\n.week-btn {\n  background: #667eea;\n  color: white;\n  border: none;\n  padding: 15rpx 30rpx;\n  border-radius: 30rpx;\n  font-size: 28rpx;\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.week-range {\n\tfont-size: 26rpx;\n\tcolor: #666;\n\tflex-shrink: 0;\n\tpadding: 0 10rpx;\n}\n.loading-text, .empty-state {\n  text-align: center;\n  color: #999;\n  padding: 40rpx 0;\n}\n.day-schedule-block {\n  margin-bottom: 30rpx;\n  background: #f9f9f9;\n  border-radius: 15rpx;\n  padding: 20rpx;\n}\n.day-date {\n  font-size: 30rpx;\n  font-weight: bold;\n  margin-bottom: 20rpx;\n}\n.day-of-week {\n  font-size: 26rpx;\n  color: #888;\n  margin-left: 15rpx;\n}\n.day-courses {\n  padding: 15rpx;\n}\n.course-row-vertical {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 18rpx;\n}\n.course-label-row {\n  font-size: 28rpx;\n  color: #333;\n  margin-bottom: 6rpx;\n  font-weight: bold;\n}\n.course-inputs-row {\n  display: flex;\n  align-items: center;\n  gap: 10rpx;\n  position: relative;\n  z-index: 1;\n}\n .course-input {\n   flex: 5;\n   background: #fff;\n   border: 1rpx solid #e0e0e0;\n   border-radius: 10rpx;\n   padding: 8rpx 15rpx;\n   height: 60rpx;\n   font-size: 26rpx;\n   box-sizing: border-box;\n   display: inline-block;\n   position: relative;\n   z-index: 100;\n   cursor: text;\n   pointer-events: auto;\n   user-select: text;\n   -webkit-user-select: text;\n   outline: none;\n   transition: border-color 0.2s ease;\n   touch-action: manipulation;\n }\n .course-input:focus {\n   border-color: #667eea;\n   box-shadow: 0 0 0 2rpx rgba(102, 126, 234, 0.1);\n }\n.course-input.class-input {\n  flex: 1.5;\n}\n.course-input.location-input {\n  flex: 1.5;\n}\n.type-picker {\n  flex: 1.2;\n  background: #fff;\n  border: 1rpx solid #e0e0e0;\n  border-radius: 10rpx;\n  padding: 0 15rpx;\n  min-width: 130rpx;\n  max-width: 180rpx;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  height: 60rpx;\n  line-height: 60rpx;\n  font-size: 26rpx;\n  box-sizing: border-box;\n  display: inline-block;\n}\n.type-display {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 60rpx;\n  white-space: nowrap;\n}\n.type-arrow {\n  margin-left: 10rpx;\n  color: #999;\n\n}\n\n.course-display {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 60rpx;\n  white-space: nowrap;\n}\n\n.course-arrow {\n  margin-left: 10rpx;\n  color: #999;\n}\n\n.course-input-wrapper {\n  flex: 1;\n  position: relative;\n  display: flex;\n  align-items: center;\n  margin-right: 15rpx;\n}\n\n.course-input-with-picker {\n  flex: 1;\n  padding-right: 60rpx !important;\n  border-top-right-radius: 0 !important;\n  border-bottom-right-radius: 0 !important;\n  border-right: none !important;\n}\n\n.course-option-picker {\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: 60rpx;\n  height: 60rpx;\n  z-index: 10;\n}\n\n.course-option-btn {\n  width: 60rpx;\n  height: 60rpx;\n  background: #f8f8f8;\n  border: 1rpx solid #e0e0e0;\n  border-left: none;\n  border-top-right-radius: 10rpx;\n  border-bottom-right-radius: 10rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 24rpx;\n  color: #666;\n  cursor: pointer;\n}\n\n.course-option-btn:active {\n  background: #e8e8e8;\n}\n\n.class-picker {\n  flex: 1.5;\n  background: #fff;\n  border: 1rpx solid #e0e0e0;\n  border-radius: 10rpx;\n  padding: 0 15rpx;\n  min-width: 130rpx;\n  max-width: 180rpx;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  height: 60rpx;\n  line-height: 60rpx;\n  font-size: 26rpx;\n  box-sizing: border-box;\n  display: inline-block;\n  margin-right: 15rpx;\n}\n\n.class-display {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 60rpx;\n  white-space: nowrap;\n}\n\n.class-arrow {\n  margin-left: 10rpx;\n  color: #999;\n}\n\n.course-picker {\n  flex: 1;\n  background: #fff;\n  border: 1rpx solid #e0e0e0;\n  border-radius: 10rpx;\n  padding: 0 15rpx;\n  min-width: 130rpx;\n  max-width: 180rpx;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  height: 60rpx;\n  line-height: 60rpx;\n  font-size: 26rpx;\n  box-sizing: border-box;\n  display: inline-block;\n  margin-right: 15rpx;\n}\n.save-btn {\n  background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border: none;\n  border-radius: 48rpx;\n  padding: 0 0;\n  font-size: 34rpx;\n  width: 100%;\n  max-width: 500rpx;\n  height: 90rpx;\n  box-shadow: 0 8rpx 32rpx rgba(102,126,234,0.18), 0 2rpx 8rpx rgba(118,75,162,0.10);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  letter-spacing: 2rpx;\n  transition: transform 0.1s, box-shadow 0.1s;\n  pointer-events: auto;\n  position: relative;\n  overflow: hidden;\n}\n.save-btn:active {\n  transform: scale(0.97);\n  box-shadow: 0 2rpx 8rpx rgba(102,126,234,0.10);\n}\n.save-btn::before {\n  content: '';\n  position: absolute;\n  left: 0; right: 0; top: 0; bottom: 0;\n  border-radius: 48rpx;\n  background: linear-gradient(120deg,rgba(255,255,255,0.12) 0%,rgba(255,255,255,0.04) 100%);\n  pointer-events: none;\n}\n.save-btn .icon {\n  font-size: 40rpx;\n  margin-right: 18rpx;\n  vertical-align: middle;\n}\n.course-block {\n  border-radius: 4rpx;\n  padding: 8rpx 0;\n  font-size: 28rpx;\n  font-weight: bold;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.08);\n  margin-bottom: 8rpx;\n  text-align: center;\n}\n.view-class-btn {\n  background: #4FC3F7;\n  color: #fff;\n  border: none;\n  border-radius: 10rpx;\n  padding: 0 18rpx;\n  font-size: 24rpx;\n  margin-left: 8rpx;\n  height: 60rpx;\n  line-height: 60rpx;\n\n}\n\n/* New styles for week header */\n.week-header-row {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 20rpx;\n  padding: 0 20rpx;\n}\n\n.week-header-cell {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 120rpx; /* Adjust as needed */\n}\n\n.day-name {\n  font-size: 28rpx;\n  font-weight: bold;\n  color: #333;\n  margin-bottom: 5rpx;\n}\n\n.day-date {\n  font-size: 24rpx;\n  color: #888;\n}\n\n/* New styles for fixed save button */\n.save-btn-fixed {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 20rpx 30rpx 40rpx 30rpx;\n  background-color: transparent;\n  z-index: 1000;\n  pointer-events: none;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n}\n.course-remark-row {\n  margin-top: 4rpx;\n}\n .course-remark-input {\n   width: 100%;\n   background: #f8f8f8;\n   border: 1rpx solid #e0e0e0;\n   border-radius: 8rpx;\n   padding: 8rpx 12rpx;\n   font-size: 24rpx;\n   margin-bottom: 8rpx;\n   box-sizing: border-box;\n   position: relative;\n   z-index: 1;\n   cursor: text;\n   pointer-events: auto;\n   user-select: text;\n   -webkit-user-select: text;\n   outline: none;\n   transition: border-color 0.2s ease;\n   height: 40rpx;\n   touch-action: manipulation;\n }\n .course-remark-input:focus {\n   border-color: #667eea;\n   box-shadow: 0 0 0 2rpx rgba(102, 126, 234, 0.1);\n }\n.course-remark-show {\n  color: #888;\n  font-size: 22rpx;\n  margin: 2rpx 0 8rpx 0;\n  line-height: 1.4;\n}\n\n/* 显眼的输入框样式 */\n.search-input,\n.course-input,\n.course-remark-input {\n  border: 3rpx solid #667eea;\n  border-radius: 12rpx;\n  padding: 12rpx 16rpx;\n  font-size: 28rpx;\n  transition: all 0.3s ease;\n  background-color: #ffffff;\n  box-shadow: 0 2rpx 6rpx rgba(0, 0, 0, 0.05);\n}\n\n/* 输入框获得焦点时的样式 */\n.search-input:focus,\n.course-input:focus,\n.course-remark-input:focus {\n  border-color: #ff4757;\n  box-shadow: 0 0 15rpx rgba(255, 71, 87, 0.7);\n  background-color: #fff0f5;\n}\n\n/* 输入框有内容时的背景色变化 */\n.search-input.has-content,\n.course-input.has-content,\n.course-remark-input.has-content {\n  background-color: #d1e7ff;\n  font-weight: 500;\n}\n\n/* 特别强调课程名输入框 */\n.course-input.has-content {\n  background-color: #ffd700;\n  font-weight: 600;\n  color: #333;\n}\n\n/* 班级输入框特殊样式 */\n.class-input.has-content {\n  background-color: #90ee90;\n  color: #333;\n}\n\n/* 教室输入框特殊样式 */\n.location-input.has-content {\n  background-color: #dda0dd;\n  color: #333;\n}\n\n</style>\n","import mod from \"-!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./teacher-schedule.vue?vue&type=style&index=0&id=1c0141c6&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./teacher-schedule.vue?vue&type=style&index=0&id=1c0141c6&scoped=true&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1759881831437\n      var cssReload = require(\"D:/hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"/\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}