{"version":3,"sources":["uni-app:///main.js","webpack:///D:/代码/小程序/新欣火1/pages/archive/archive.vue?34d6","webpack:///D:/代码/小程序/新欣火1/pages/archive/archive.vue?7406","webpack:///D:/代码/小程序/新欣火1/pages/archive/archive.vue?5559","webpack:///D:/代码/小程序/新欣火1/pages/archive/archive.vue?93df","uni-app:///pages/archive/archive.vue","webpack:///D:/代码/小程序/新欣火1/pages/archive/archive.vue?5d9d","webpack:///D:/代码/小程序/新欣火1/pages/archive/archive.vue?041a"],"names":["wx","__webpack_require_UNI_MP_PLUGIN__","__webpack_require__","createPage","Page","data","searchKeyword","activeTab","gradeFilter","gradeFilterIndex","gradeOptions","sortIndex","sortOptions","loading","students","classes","studentsTotal","classesTotal","studentsPage","classesPage","hasMoreStudents","hasMoreClasses","showStudentsPagination","showClassesPagination","studentsPageSize","classesPageSize","isEditMode","selectedItems","showDeleteModal","deleteMessage","deleteTarget","deleteType","localCache","allStudents","allClasses","lastLoadTime","isLoaded","isLoadingBackground","backgroundLoadProgress","studentsBatches","classesBatches","studentsBatchSize","classesBatchSize","studentsTotalBatches","classesTotalBatches","currentStudentsBatch","currentClassesBatch","computed","studentsTotalPages","console","classesTotalPages","filteredStudents","filtered","filteredClasses","paginatedStudents","paginatedClasses","isAllSelected","onLoad","onShow","onReady","methods","goBack","uni","onSearchInput","clearTimeout","performSearch","student","searchStudents","classItem","searchClasses","clearSearch","switchTab","onGradeFilterChange","onSortChange","sortData","loadData","uniCloud","name","action","page","pageSize","studentsResult","classesResult","title","icon","loadFromCache","saveCacheToStorage","loadCacheFromStorage","updateLocalCache","newStudents","newClasses","addClassToLocalCache","_id","className","grade","subject","headTeacher","headTeacherId","school","studentIds","studentCount","status","createTime","updateTime","loadFirstBatchData","studentsCountResult","classesCountResult","firstBatchStudents","firstBatchClasses","loadRemainingBatchesInBackground","totalBatches","loadedBatches","batchIndex","result","batchData","applyFilters","addStudentToCache","addClassToCache","removeStudentFromCache","removeClassFromCache","refreshCache","loadStudentsPage","loadClassesPage","prevPage","nextPage","duration","navigateToStudentDetail","url","navigateToClassDetail","formatDate","enterEditMode","exitEditMode","toggleSelectAll","isStudentSelected","isClassSelected","toggleStudentSelection","toggleClassSelection","showDeleteConfirm","showBatchDeleteConfirm","closeDeleteModal","confirmDelete","singleDelete","studentId","classId","batchDelete","classIds"],"mappings":";;;;;;;;;;;;;AAAA;AAE2D;AAC3D;AACA;AAHA;AACAA,EAAE,CAACC,iCAAiC,GAAGC,mBAAmB;AAG1DC,UAAU,CAACC,gBAAI,CAAC,C;;;;;;;;;;;;;ACLhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgI;AAChI;AAC2D;AACL;AACqC;;;AAG3F;AACgL;AAChL,gBAAgB,uLAAU;AAC1B,EAAE,6EAAM;AACR,EAAE,8FAAM;AACR,EAAE,uGAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,kGAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAqqB,CAAgB,mqBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eC6SzrB;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACA;MACAC;QACAC;QAAA;QACAC;QAAA;QACAC;QACAC;QAAA;QACAC;QAAA;QACAC;QAAA;QACA;QACAC;QAAA;QACAC;QAAA;QACAC;QAAA;QACAC;QACAC;QAAA;QACAC;QACAC;QAAA;QACAC;MACA;IACA;EACA;EACAC;IACA;IACAC;MACA;MACAC;MACA;IACA;IAEA;IACAC;MACA;IACA;IAEAC;MAAA;MACA;;MAEA;MACA;QACAC;UAAA;QAAA;MACA;;MAEA;MACA;IACA;IACAC;MAAA;MACA;;MAEA;MACA;QACAD;UAAA;QAAA;MACA;;MAEA;MACA;IACA;IACA;IACAE;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA,4EACA,kGACA;MACA;IACA;EACA;EACAC;IACA;IACA;EACA;EACAC;IACA;IACA;EACA;EAEAC;IACA;EAAA,CACA;EACAC;IACAC;MACAC;IACA;IACAC;MAAA;MACA;MACAC;MACA;QACA;MACA;IACA;IAEAC;MAAA;MACA;QACA;QACA;QACA;MACA;;MAEA;MACA;;MAEA;MACA;QACA;UAAA;UAAA,OACAC,gDACAA,yEACAA;QAAA,EACA;;QAEA;QACA;UACAC;YAAA;UAAA;QACA;;QAEA;QACA;QACA;QACA;QACA;MACA;;MAEA;MACA;QACA;UAAA,OACAC,uDACAA,uDACAA;QAAA,EACA;;QAEA;QACA;UACAC;YAAA;UAAA;QACA;;QAEA;QACA;QACA;QACA;QACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;;MAEA;MACA;IACA;IACAC;MACA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;QAAA;QACA;UACA;YACA;UACA;YACA;UACA;YACA;UACA;YACA;UACA;YACA;QAAA;MAEA;IACA;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACA;gBAAA;gBAEA1B;;gBAEA;gBAAA;gBAAA,OACA2B;kBACAC;kBACAxE;oBACAyE;oBACAC;oBACAC;kBACA;gBACA;cAAA;gBAPAC;gBAAA;gBAAA,OASAL;kBACAC;kBACAxE;oBACAyE;oBACAC;oBACAC;kBACA;gBACA;cAAA;gBAPAE;gBASA;kBACA;kBACA;kBACAjC;kBACAA;gBACA;kBACAA;gBACA;gBAEA;kBACA;kBACA;kBACAA;kBACAA;gBACA;kBACAA;gBACA;;gBAEA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAGAA;gBACAa;kBACAqB;kBACAC;gBACA;cAAA;gBAAA;gBAEA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAC;MACApC;MACAA;MACAA;;MAEA;MACA;MACA;MAEAA;MACAA;;MAEA;MACA;MAEAA;IACA;IAEA;IACAqC;MACA;QACA;UACA/C;UACAC;UACAxB;UACAC;UACAkB;UACAC;UACA;UACAlB;UACAC;UACAC;UACAC;UACAC;UACAC;QACA;QACAuC;QACAb;MACA;QACAA;MACA;IACA;IAEA;IACAsC;MACA;QACA;QACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UAEAtC;UACAA;UACAA;UACAA;YACAjC;YACAC;YACAK;YACAC;YACAH;YACAC;UACA;UACA;QACA;MACA;QACA4B;MACA;MACA;IACA;IAEA;IACAuC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEAvC;;gBAEA;gBAAA;gBAAA,OACA2B;kBACAC;kBACAxE;oBACAyE;oBACAC;oBACAC;kBACA;gBACA;cAAA;gBAPAC;gBAAA;gBAAA,OASAL;kBACAC;kBACAxE;oBACAyE;oBACAC;oBACAC;kBACA;gBACA;cAAA;gBAPAE;gBASA;kBACAO;kBACA;kBACA;kBACAxC;gBACA;gBAEA;kBACAyC;kBACA;kBACA;kBACAzC;gBACA;;gBAEA;gBACA;gBACA;gBACA;gBACA;;gBAEA;gBACA;;gBAEA;gBACA;gBAEAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAGAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACA0C;MACA;QACA1C;QAEA;UACA;YACA2C;YACAC;YACAC;YACAC;YACAC;YACAC;YACAC;YACApF;YACAqF;YACAC;YACAC;YACAC;YACAC;UACA;;UAEA;UACA;UACA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UAEAtD;QACA;MACA;QACAA;MACA;IACA;IAEA;IACAuD;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEAvD;;gBAEA;gBAAA;gBAAA,OACA2B;kBACAC;kBACAxE;oBACAyE;oBACAC;oBACAC;kBACA;gBACA;cAAA;gBAPAyB;gBAAA;gBAAA,OASA7B;kBACAC;kBACAxE;oBACAyE;oBACAC;oBACAC;kBACA;gBACA;cAAA;gBAPA0B;gBASA;kBACA;kBACA;kBACAzD;gBACA;gBAEA;kBACA;kBACA;kBACAA;gBACA;;gBAEA;gBAAA;gBAAA,OACA2B;kBACAC;kBACAxE;oBACAyE;oBACAC;oBACAC;kBACA;gBACA;cAAA;gBAPAC;gBAAA;gBAAA,OAUAL;kBACAC;kBACAxE;oBACAyE;oBACAC;oBACAC;kBACA;gBACA;cAAA;gBAPAE;gBASA;kBACAyB,uDACA;kBACA;oBACA;kBACA;kBACA;kBACA;kBACA1D;kBACAA;gBACA;gBAEA;kBACA2D,qDACA;kBACA;oBACA;kBACA;kBACA;kBACA;kBACA3D;kBACAA;gBACA;;gBAEA;gBACA;;gBAEA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBAEAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAGAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAGA;IAEA;IACA4D;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEA5D;gBACA;gBACA;gBAEA6D;gBACAC,mBAEA;gBACAC;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;gBAAA;gBAEAjC;gBAAA;gBAAA,OACAH;kBACAC;kBACAxE;oBACAyE;oBACAC;oBACAC;kBACA;gBACA;cAAA;gBAPAiC;gBASA;kBACAC,sCACA;kBACA;oBACA;kBACA;kBACA;kBACA;kBACAjE;kBACAA;gBACA;gBAEA8D;gBACA;;gBAEA;gBACA;;gBAEA;gBAAA;gBAAA,OACA;kBAAA;gBAAA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEA9D;cAAA;gBAjCA+D;gBAAA;gBAAA;cAAA;gBAsCAA;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;gBAAA;gBAEAjC;gBAAA;gBAAA,OACAH;kBACAC;kBACAxE;oBACAyE;oBACAC;oBACAC;kBACA;gBACA;cAAA;gBAPAiC;gBASA;kBACAC,wCACA;kBACA;oBACA;kBACA;kBACA;kBACA;kBACAjE;kBACAA;gBACA;gBAEA8D;gBACA;;gBAEA;gBACA;;gBAEA;gBAAA;gBAAA,OACA;kBAAA;gBAAA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEA9D;cAAA;gBAjCA+D;gBAAA;gBAAA;cAAA;gBAqCA;gBACA/D;;gBAEA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAGAA;cAAA;gBAAA;gBAEA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAIA;IACAkE;MAAA;MACAlE;MACAA;MACAA;;MAEA;MACA;MACA;MAEAA;MACAA;MACAA;MACAA;;MAEA;MACA;MACA;MACA;MACA;MAEAA;MACAA;MACAA;IACA;IAEA;IACAmE;MACA;MACA;IACA;IAEA;IACAC;MACA;MACA;IACA;IAEA;IACAC;MACA;QAAA;MAAA;MACA;IACA;IAEA;IACAC;MACA;QAAA;MAAA;MACA;IACA;IAEA;IACAC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;gBACA;gBAAA;gBAAA,OACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACA;IAEA;IACAC;MACA;MACA;;MAEA;MACA;MAEAxE;IACA;IAEA;IACAyE;MACA;MACA;;MAEA;MACA;MAEAzE;IACA;IAEA;IACA0E;MACA;QACA;MACA;QACA;MACA;IACA;IAEA;IACAC;MACA;QACA;UACA;QACA;UACA9D;YACAqB;YACAC;YACAyC;UACA;QACA;MACA;QACA;UACA;QACA;UACA/D;YACAqB;YACAC;YACAyC;UACA;QACA;MACA;IACA;IAGAC;MACAhE;QACAiE;MACA;IACA;IACAC;MACAlE;QACAiE;MACA;IACA;IACAE;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA,2EACA,iGACA;MAEA;QACA;MACA;QACA;MACA;IACA;IACAC;MACA;QAAA;MAAA;IACA;IACAC;MACA;QAAA;MAAA;IACA;IACAC;MACA;QAAA;MAAA;MACA;QACA;MACA;QACA;MACA;IACA;IACAC;MACA;QAAA;MAAA;MACA;QACA;MACA;QACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MAEA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACAC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,MAEA;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA,OAEA;cAAA;gBAEA;gBACA;gBACA9E;kBACAqB;kBACAC;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAnC;gBACAa;kBACAqB;kBACAC;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IACAyD;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACA/G;gBAAA,MAEAC;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACA6C;kBACAC;kBACAxE;oBACAyE;oBACAgE;kBACA;gBACA;cAAA;gBAAA;gBAAA;cAAA;gBAAA,MACA/G;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACA6C;kBACAC;kBACAxE;oBACAyE;oBACAiE;kBACA;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACAlI;kBAAA;oBAAA;kBAAA;gBAAA;gBACAC;kBAAA;oBAAA;kBAAA;gBAAA,IAEA;gBAAA,MACAD;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACA8D;kBACAC;kBACAxE;oBACAyE;oBACAqB;sBAAA;oBAAA;kBACA;gBACA;cAAA;gBAAA,MAIApF;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACA6D;kBACAC;kBACAxE;oBACAyE;oBACAmE;sBAAA;oBAAA;kBACA;gBACA;cAAA;gBAGA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACA;EACA;AACA;AAAA,2B;;;;;;;;;;;;;ACxsCA;AAAA;AAAA;AAAA;AAA0+B,CAAgB,o8BAAG,EAAC,C;;;;;;;;;;;ACA9/B;AACA,OAAO,KAAU,EAAE,kBAKd","file":"pages/archive/archive.js","sourcesContent":["import 'uni-pages';\n// @ts-ignore\nwx.__webpack_require_UNI_MP_PLUGIN__ = __webpack_require__;import '@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js';\nimport Vue from 'vue'\nimport Page from './pages/archive/archive.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./archive.vue?vue&type=template&id=76a5fae8&scoped=true&\"\nvar renderjs\nimport script from \"./archive.vue?vue&type=script&lang=js&\"\nexport * from \"./archive.vue?vue&type=script&lang=js&\"\nimport style0 from \"./archive.vue?vue&type=style&index=0&id=76a5fae8&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"76a5fae8\",\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"pages/archive/archive.vue\"\nexport default component.exports","export * from \"-!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--17-0!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/template.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./archive.vue?vue&type=template&id=76a5fae8&scoped=true&\"","var components\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  var g0 =\n    _vm.activeTab === \"all\" || _vm.activeTab === \"students\"\n      ? _vm.paginatedStudents.length === 0 && !_vm.loading\n      : null\n  var g1 =\n    _vm.activeTab === \"all\" || _vm.activeTab === \"students\"\n      ? _vm.paginatedStudents.length\n      : null\n  var l0 =\n    (_vm.activeTab === \"all\" || _vm.activeTab === \"students\") && g1 > 0\n      ? _vm.__map(_vm.paginatedStudents, function (student, __i0__) {\n          var $orig = _vm.__get_orig(student)\n          var m0 = _vm.isStudentSelected(student)\n          var m1 = _vm.isEditMode ? _vm.isStudentSelected(student) : null\n          var m2 = _vm.isEditMode ? _vm.isStudentSelected(student) : null\n          var g2 = student.name.charAt(0)\n          var g3 = student.subjects.join(\"、\")\n          var m3 = _vm.formatDate(student.createTime)\n          return {\n            $orig: $orig,\n            m0: m0,\n            m1: m1,\n            m2: m2,\n            g2: g2,\n            g3: g3,\n            m3: m3,\n          }\n        })\n      : null\n  var g4 =\n    _vm.activeTab === \"all\" || _vm.activeTab === \"classes\"\n      ? _vm.paginatedClasses.length === 0 && !_vm.loading\n      : null\n  var g5 =\n    _vm.activeTab === \"all\" || _vm.activeTab === \"classes\"\n      ? _vm.paginatedClasses.length\n      : null\n  var l1 =\n    (_vm.activeTab === \"all\" || _vm.activeTab === \"classes\") && g5 > 0\n      ? _vm.__map(_vm.paginatedClasses, function (classItem, __i1__) {\n          var $orig = _vm.__get_orig(classItem)\n          var m4 = _vm.isClassSelected(classItem)\n          var m5 = _vm.isEditMode ? _vm.isClassSelected(classItem) : null\n          var m6 = _vm.isEditMode ? _vm.isClassSelected(classItem) : null\n          var m7 = _vm.formatDate(classItem.createTime)\n          return {\n            $orig: $orig,\n            m4: m4,\n            m5: m5,\n            m6: m6,\n            m7: m7,\n          }\n        })\n      : null\n  var g6 = _vm.isEditMode ? _vm.selectedItems.length : null\n  var g7 = _vm.isEditMode ? _vm.selectedItems.length : null\n  if (!_vm._isMounted) {\n    _vm.e0 = function ($event, student) {\n      var _temp = arguments[arguments.length - 1].currentTarget.dataset,\n        _temp2 = _temp.eventParams || _temp[\"event-params\"],\n        student = _temp2.student\n      var _temp, _temp2\n      _vm.isEditMode\n        ? _vm.toggleStudentSelection(student)\n        : _vm.navigateToStudentDetail(student)\n    }\n    _vm.e1 = function ($event, classItem) {\n      var _temp3 = arguments[arguments.length - 1].currentTarget.dataset,\n        _temp4 = _temp3.eventParams || _temp3[\"event-params\"],\n        classItem = _temp4.classItem\n      var _temp3, _temp4\n      _vm.isEditMode\n        ? _vm.toggleClassSelection(classItem)\n        : _vm.navigateToClassDetail(classItem)\n    }\n  }\n  _vm.$mp.data = Object.assign(\n    {},\n    {\n      $root: {\n        g0: g0,\n        g1: g1,\n        l0: l0,\n        g4: g4,\n        g5: g5,\n        l1: l1,\n        g6: g6,\n        g7: g7,\n      },\n    }\n  )\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./archive.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./archive.vue?vue&type=script&lang=js&\"","<template>\n  <view class=\"container\">\n    <!-- 自定义导航栏 -->\n    <view class=\"custom-navbar\">\n      <view class=\"navbar-content\">\n        <view class=\"navbar-left\" @click=\"goBack\">\n          <text class=\"back-icon\">‹</text>\n          <text class=\"back-text\">返回</text>\n        </view>\n        <text class=\"navbar-title\">档案管理</text>\n        <view class=\"navbar-right\"></view>\n      </view>\n    </view>\n    \n    <!-- 搜索栏 -->\n    <view class=\"search-container\">\n      <view class=\"search-bar\">\n        <text class=\"search-icon\">🔍</text>\n        <input \n          class=\"search-input\" \n          v-model=\"searchKeyword\" \n          placeholder=\"搜索学生姓名、学号或班级\"\n          @input=\"onSearchInput\"\n        />\n        <view v-if=\"searchKeyword\" class=\"clear-btn\" @click=\"clearSearch\">\n          <text class=\"clear-icon\">×</text>\n        </view>\n      </view>\n    </view>\n    \n    <!-- 分类标签 -->\n    <view class=\"category-tabs\">\n      <view \n        class=\"category-tab\"\n        :class=\"{active: activeTab === 'all'}\"\n        @click=\"switchTab('all')\"\n      >\n        全部\n      </view>\n      <view \n        class=\"category-tab\"\n        :class=\"{active: activeTab === 'students'}\"\n        @click=\"switchTab('students')\"\n      >\n        学生档案\n      </view>\n      <view \n        class=\"category-tab\"\n        :class=\"{active: activeTab === 'classes'}\"\n        @click=\"switchTab('classes')\"\n      >\n        班级档案\n      </view>\n    </view>\n    \n    \n    <!-- 编辑模式切换 -->\n    <view v-if=\"!isEditMode\" class=\"edit-mode-toggle\">\n      <view class=\"edit-mode-btn\" @click=\"enterEditMode\">\n        <image class=\"edit-icon\" src=\"/static/745 (1).png\" mode=\"aspectFit\"></image>\n      </view>\n    </view>\n    \n    <!-- 后台加载进度指示器 -->\n    <view v-if=\"localCache.isLoadingBackground\" class=\"background-loading-indicator\">\n      <view class=\"loading-progress\">\n        <text class=\"loading-text\">正在后台加载更多数据... {{ localCache.backgroundLoadProgress }}%</text>\n        <view class=\"progress-bar\">\n          <view class=\"progress-fill\" :style=\"{width: localCache.backgroundLoadProgress + '%'}\"></view>\n        </view>\n      </view>\n    </view>\n    \n    <!-- 筛选条件 -->\n    <view class=\"filter-container\">\n      <view class=\"filter-row\">\n        <view class=\"filter-item\">\n          <text class=\"filter-label\">年级筛选：</text>\n          <picker \n            mode=\"selector\" \n            :value=\"gradeFilterIndex\" \n            :range=\"gradeOptions\" \n            @change=\"onGradeFilterChange\"\n          >\n            <view class=\"filter-picker\">\n              {{ gradeFilter || '全部年级' }}\n              <text class=\"picker-arrow\">▼</text>\n            </view>\n          </picker>\n        </view>\n        \n        <view class=\"filter-item\">\n          <text class=\"filter-label\">排序方式：</text>\n          <picker \n            mode=\"selector\" \n            :value=\"sortIndex\" \n            :range=\"sortOptions\" \n            @change=\"onSortChange\"\n          >\n            <view class=\"filter-picker\">\n              {{ sortOptions[sortIndex] }}\n              <text class=\"picker-arrow\">▼</text>\n            </view>\n          </picker>\n        </view>\n      </view>\n    </view>\n    \n    <!-- 数据列表 -->\n    <view class=\"data-container\">\n      <!-- 加载状态 -->\n      <view v-if=\"loading\" class=\"loading-container\">\n        <text class=\"loading-text\">加载中...</text>\n      </view>\n      \n      <!-- 学生档案列表 -->\n      <view v-if=\"activeTab === 'all' || activeTab === 'students'\" class=\"section\">\n        <view class=\"section-title\">\n          <text class=\"title-text\">学生档案 ({{ studentsTotal }})</text>\n        </view>\n        \n        <view v-if=\"paginatedStudents.length === 0 && !loading\" class=\"empty-state\">\n          <text class=\"empty-text\">暂无学生档案</text>\n        </view>\n        \n        <!-- 学生分页控件 -->\n        <view v-if=\"showStudentsPagination\" class=\"pagination-container\">\n          <view class=\"pagination-info\">\n            <text class=\"pagination-text\">第 {{ studentsPage }} 页，共 {{ studentsTotalPages }} 页</text>\n          </view>\n          <view class=\"pagination-buttons\">\n            <button \n              class=\"pagination-btn prev-btn\" \n              :disabled=\"studentsPage <= 1\"\n              @click=\"prevPage('students')\"\n            >\n              上一页\n            </button>\n            <button \n              class=\"pagination-btn next-btn\" \n              :disabled=\"!hasMoreStudents\"\n              @click=\"nextPage('students')\"\n            >\n              下一页\n            </button>\n          </view>\n        </view>\n        \n        <!-- 学生数据列表 -->\n        <view v-if=\"paginatedStudents.length > 0\" class=\"student-list\">\n          <view \n            v-for=\"student in paginatedStudents\" \n            :key=\"student._id\"\n            class=\"student-card\"\n            :class=\"{selected: isStudentSelected(student)}\"\n            @click=\"isEditMode ? toggleStudentSelection(student) : navigateToStudentDetail(student)\"\n          >\n            <view v-if=\"isEditMode\" class=\"selection-checkbox\">\n              <view class=\"checkbox\" :class=\"{checked: isStudentSelected(student)}\">\n                <text v-if=\"isStudentSelected(student)\" class=\"check-icon\">✓</text>\n              </view>\n            </view>\n            <view class=\"student-avatar\">\n              <text class=\"avatar-text\">{{ student.name.charAt(0) }}</text>\n            </view>\n            <view class=\"student-info\">\n              <view class=\"student-header\">\n                <text class=\"student-name\">{{ student.name }}</text>\n                <text class=\"student-id\">{{ student.studentId }}</text>\n              </view>\n              <view class=\"student-details\">\n                <text class=\"student-grade\">{{ student.grade }}</text>\n                <text class=\"student-subjects\">{{ student.subjects.join('、') }}</text>\n                <text v-if=\"student.school\" class=\"student-school\">{{ student.school }}</text>\n              </view>\n              <view class=\"student-meta\">\n                <text class=\"create-time\">{{ formatDate(student.createTime) }}</text>\n              </view>\n            </view>\n            <view class=\"student-actions\">\n              <text v-if=\"!isEditMode\" class=\"action-icon\">›</text>\n              <view v-else class=\"edit-actions\">\n                <button class=\"delete-btn\" @click.stop=\"showDeleteConfirm(student, 'student')\">删除</button>\n              </view>\n            </view>\n          </view>\n        </view>\n      </view>\n      \n      <!-- 班级档案列表 -->\n      <view v-if=\"activeTab === 'all' || activeTab === 'classes'\" class=\"section\">\n        <view class=\"section-title\">\n          <text class=\"title-text\">班级档案 ({{ classesTotal }})</text>\n        </view>\n        \n        <view v-if=\"paginatedClasses.length === 0 && !loading\" class=\"empty-state\">\n          <text class=\"empty-text\">暂无班级档案</text>\n        </view>\n        \n        <!-- 班级分页控件 -->\n        <view v-if=\"showClassesPagination\" class=\"pagination-container\">\n          <view class=\"pagination-info\">\n            <text class=\"pagination-text\">第 {{ classesPage }} 页，共 {{ classesTotalPages }} 页</text>\n          </view>\n          <view class=\"pagination-buttons\">\n            <button \n              class=\"pagination-btn prev-btn\" \n              :disabled=\"classesPage <= 1\"\n              @click=\"prevPage('classes')\"\n            >\n              上一页\n            </button>\n            <button \n              class=\"pagination-btn next-btn\" \n              :disabled=\"!hasMoreClasses\"\n              @click=\"nextPage('classes')\"\n            >\n              下一页\n            </button>\n          </view>\n        </view>\n        \n        <!-- 班级数据列表 -->\n        <view v-if=\"paginatedClasses.length > 0\" class=\"class-list\">\n          <view \n            v-for=\"classItem in paginatedClasses\" \n            :key=\"classItem._id\"\n            class=\"class-card\"\n            :class=\"{selected: isClassSelected(classItem)}\"\n            @click=\"isEditMode ? toggleClassSelection(classItem) : navigateToClassDetail(classItem)\"\n          >\n            <view v-if=\"isEditMode\" class=\"selection-checkbox\">\n              <view class=\"checkbox\" :class=\"{checked: isClassSelected(classItem)}\">\n                <text v-if=\"isClassSelected(classItem)\" class=\"check-icon\">✓</text>\n              </view>\n            </view>\n            <view class=\"class-icon\">\n              <text class=\"class-icon-text\">班</text>\n            </view>\n            <view class=\"class-info\">\n              <view class=\"class-header\">\n                <text class=\"class-name\">{{ classItem.className }}</text>\n                <text class=\"class-code\">{{ classItem.classCode }}</text>\n              </view>\n              <view class=\"class-details\">\n                <text class=\"class-grade\">{{ classItem.grade }}</text>\n                <text class=\"class-teacher\">班主任：{{ classItem.teacherName }}</text>\n                <text class=\"class-student-count\">学生数：{{ classItem.studentCount || 0 }}</text>\n              </view>\n              <view class=\"class-meta\">\n                <text class=\"create-time\">{{ formatDate(classItem.createTime) }}</text>\n              </view>\n            </view>\n            <view class=\"class-actions\">\n              <text v-if=\"!isEditMode\" class=\"action-icon\">›</text>\n              <view v-else class=\"edit-actions\">\n                <button class=\"delete-btn\" @click.stop=\"showDeleteConfirm(classItem, 'class')\">删除</button>\n              </view>\n            </view>\n          </view>\n        </view>\n      </view>\n    </view>\n    \n    <!-- 批量操作工具栏 - 固定在底部 -->\n    <view v-if=\"isEditMode\" class=\"batch-toolbar-fixed\">\n      <view class=\"toolbar-left\">\n        <view class=\"select-all-btn\" @click=\"toggleSelectAll\">\n          <text class=\"select-all-text\">{{ isAllSelected ? '取消全选' : '全选' }}</text>\n        </view>\n        <text class=\"selected-count\">已选择 {{ selectedItems.length }} 项</text>\n      </view>\n      <view class=\"toolbar-right\">\n        <button class=\"batch-delete-btn\" @click=\"showBatchDeleteConfirm\" :disabled=\"selectedItems.length === 0\">\n          批量删除\n        </button>\n        <button class=\"exit-edit-btn\" @click=\"exitEditMode\">\n          完成\n        </button>\n      </view>\n    </view>\n    \n    <!-- 删除确认弹窗 -->\n    <view v-if=\"showDeleteModal\" class=\"delete-modal\" @click=\"closeDeleteModal\">\n      <view class=\"delete-modal-content\" @click.stop>\n        <view class=\"delete-header\">\n          <text class=\"delete-title\">确认删除</text>\n        </view>\n        <view class=\"delete-body\">\n          <text class=\"delete-message\">{{ deleteMessage }}</text>\n        </view>\n        <view class=\"delete-footer\">\n          <button class=\"cancel-delete-btn\" @click=\"closeDeleteModal\">取消</button>\n          <button class=\"confirm-delete-btn\" @click=\"confirmDelete\">确认删除</button>\n        </view>\n      </view>\n    </view>\n  </view>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      searchKeyword: '',\n      activeTab: 'all',\n      gradeFilter: '',\n      gradeFilterIndex: 0,\n      gradeOptions: ['全部年级', '一年级', '二年级', '三年级', '四年级', '五年级', '六年级', '七年级', '八年级', '九年级', '高一', '高二', '高三'],\n      sortIndex: 0,\n      sortOptions: ['按创建时间', '按姓名', '按学号', '按年级'],\n      loading: false,\n      students: [],\n      classes: [],\n      // 添加总数和分页信息\n      studentsTotal: 0,\n      classesTotal: 0,\n      studentsPage: 1,\n      classesPage: 1,\n      hasMoreStudents: true,\n      hasMoreClasses: true,\n      // 分页显示控制\n      showStudentsPagination: false,\n      showClassesPagination: false,\n      studentsPageSize: 20,\n      classesPageSize: 20,\n      isEditMode: false,\n      selectedItems: [],\n      showDeleteModal: false,\n      deleteMessage: '',\n      deleteTarget: null,\n      deleteType: '',\n      // 本地缓存机制 - 存储所有数据\n      localCache: {\n        allStudents: [], // 所有学生数据\n        allClasses: [], // 所有班级数据\n        lastLoadTime: null,\n        isLoaded: false, // 是否已加载全量数据\n        isLoadingBackground: false, // 是否正在后台加载\n        backgroundLoadProgress: 0, // 后台加载进度\n        // 分批缓存\n        studentsBatches: [], // 存储学生数据批次 [batch1, batch2, batch3...]\n        classesBatches: [],  // 存储班级数据批次 [batch1, batch2, batch3...]\n        studentsBatchSize: 50, // 每批50条数据\n        classesBatchSize: 50,\n        studentsTotalBatches: 0, // 总批次数\n        classesTotalBatches: 0,\n        currentStudentsBatch: 0, // 当前加载到第几批\n        currentClassesBatch: 0\n      }\n    }\n  },\n  computed: {\n    // 计算学生总页数\n    studentsTotalPages() {\n      const totalPages = Math.ceil(this.studentsTotal / this.studentsPageSize);\n      console.log('计算学生总页数:', this.studentsTotal, '/', this.studentsPageSize, '=', totalPages);\n      return totalPages;\n    },\n    \n    // 计算班级总页数\n    classesTotalPages() {\n      return Math.ceil(this.classesTotal / this.classesPageSize);\n    },\n    \n    filteredStudents() {\n      let filtered = this.localCache.allStudents || [];\n      \n      // 年级过滤\n      if (this.gradeFilter && this.gradeFilter !== '全部年级') {\n        filtered = filtered.filter(student => student.grade === this.gradeFilter);\n      }\n      \n      // 排序\n      return this.sortData(filtered);\n    },\n    filteredClasses() {\n      let filtered = this.localCache.allClasses || [];\n      \n      // 年级过滤\n      if (this.gradeFilter && this.gradeFilter !== '全部年级') {\n        filtered = filtered.filter(classItem => classItem.grade === this.gradeFilter);\n      }\n      \n      // 排序\n      return this.sortData(filtered);\n    },\n    // 分页后的学生数据\n    paginatedStudents() {\n      const startIndex = (this.studentsPage - 1) * this.studentsPageSize;\n      const endIndex = startIndex + this.studentsPageSize;\n      return this.filteredStudents.slice(startIndex, endIndex);\n    },\n    // 分页后的班级数据\n    paginatedClasses() {\n      const startIndex = (this.classesPage - 1) * this.classesPageSize;\n      const endIndex = startIndex + this.classesPageSize;\n      return this.filteredClasses.slice(startIndex, endIndex);\n    },\n    isAllSelected() {\n      const currentItems = this.activeTab === 'students' ? this.paginatedStudents : \n                          this.activeTab === 'classes' ? this.paginatedClasses : \n                          [...this.paginatedStudents, ...this.paginatedClasses];\n      return currentItems.length > 0 && this.selectedItems.length === currentItems.length;\n    }\n  },\n  onLoad() {\n    // 直接加载数据，不使用缓存\n    this.loadData();\n  },\n  onShow() {\n    // 直接加载数据，不使用缓存\n    this.loadData();\n  },\n  \n  onReady() {\n    // 不再使用缓存，无需注册全局方法\n  },\n  methods: {\n    goBack() {\n      uni.navigateBack();\n    },\n    onSearchInput() {\n      // 搜索防抖处理\n      clearTimeout(this.searchTimer);\n      this.searchTimer = setTimeout(() => {\n        this.performSearch();\n      }, 300);\n    },\n    \n    performSearch() {\n      if (!this.searchKeyword.trim()) {\n        // 如果搜索关键词为空，重新应用筛选条件\n        this.applyFilters();\n        return;\n      }\n      \n      // 使用本地缓存进行搜索\n      const keyword = this.searchKeyword.toLowerCase().trim();\n      \n      // 搜索学生\n      if (this.activeTab === 'students' || this.activeTab === 'all') {\n        let searchStudents = this.localCache.allStudents.filter(student => \n          student.name.toLowerCase().includes(keyword) ||\n          student.studentId.toLowerCase().includes(keyword) ||\n          student.school?.toLowerCase().includes(keyword)\n        );\n        \n        // 应用年级筛选\n        if (this.gradeFilter && this.gradeFilter !== '全部年级') {\n          searchStudents = searchStudents.filter(student => student.grade === this.gradeFilter);\n        }\n        \n        // 应用分页：只显示当前页的搜索结果\n        const startIndex = (this.studentsPage - 1) * this.studentsPageSize;\n        const endIndex = startIndex + this.studentsPageSize;\n        this.students = searchStudents.slice(startIndex, endIndex);\n        // 搜索时保持数据库中的真实总数，不修改 studentsTotal\n      }\n      \n      // 搜索班级\n      if (this.activeTab === 'classes' || this.activeTab === 'all') {\n        let searchClasses = this.localCache.allClasses.filter(classItem => \n          classItem.className.toLowerCase().includes(keyword) ||\n          classItem.classCode.toLowerCase().includes(keyword) ||\n          classItem.teacherName.toLowerCase().includes(keyword)\n        );\n        \n        // 应用年级筛选\n        if (this.gradeFilter && this.gradeFilter !== '全部年级') {\n          searchClasses = searchClasses.filter(classItem => classItem.grade === this.gradeFilter);\n        }\n        \n        // 应用分页：只显示当前页的搜索结果\n        const classStartIndex = (this.classesPage - 1) * this.classesPageSize;\n        const classEndIndex = classStartIndex + this.classesPageSize;\n        this.classes = searchClasses.slice(classStartIndex, classEndIndex);\n        // 搜索时保持数据库中的真实总数，不修改 classesTotal\n      }\n    },\n    clearSearch() {\n      this.searchKeyword = '';\n      // 清空搜索时重新应用筛选条件\n      this.performSearch();\n    },\n    switchTab(tab) {\n      this.activeTab = tab;\n      \n      // 切换标签页时，重新应用筛选条件\n      this.applyFilters();\n    },\n    onGradeFilterChange(e) {\n      this.gradeFilterIndex = e.detail.value;\n      this.gradeFilter = this.gradeOptions[e.detail.value];\n      \n      // 年级筛选变化时，重置分页到第一页\n      this.studentsPage = 1;\n      this.classesPage = 1;\n      \n      // 直接应用筛选条件（使用缓存数据）\n      this.applyFilters();\n    },\n    onSortChange(e) {\n      this.sortIndex = e.detail.value;\n    },\n    sortData(data) {\n      const sortType = this.sortOptions[this.sortIndex];\n      return data.sort((a, b) => {\n        switch (sortType) {\n          case '按创建时间':\n            return new Date(b.createTime) - new Date(a.createTime);\n          case '按姓名':\n            return a.name.localeCompare(b.name);\n          case '按学号':\n            return a.studentId?.localeCompare(b.studentId) || 0;\n          case '按年级':\n            return a.grade.localeCompare(b.grade);\n          default:\n            return 0;\n        }\n      });\n    },\n    async loadData() {\n      this.loading = true;\n      try {\n        console.log('开始加载数据（直接读取数据库）');\n        \n        // 直接加载学生和班级数据\n        const studentsResult = await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'getStudents',\n            page: 1,\n            pageSize: 1000 // 获取所有学生\n          }\n        });\n        \n        const classesResult = await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'getClasses',\n            page: 1,\n            pageSize: 1000 // 获取所有班级\n          }\n        });\n        \n        if (studentsResult.result.code === 0) {\n          this.localCache.allStudents = studentsResult.result.data || [];\n          this.studentsTotal = studentsResult.result.total || 0;\n          console.log('学生数据加载成功，数量:', this.localCache.allStudents.length);\n          console.log('学生数据详情:', this.localCache.allStudents);\n        } else {\n          console.error('学生数据加载失败:', studentsResult.result.message);\n        }\n        \n        if (classesResult.result.code === 0) {\n          this.localCache.allClasses = classesResult.result.data || [];\n          this.classesTotal = classesResult.result.total || 0;\n          console.log('班级数据加载成功，数量:', this.localCache.allClasses.length);\n          console.log('班级数据详情:', this.localCache.allClasses);\n        } else {\n          console.error('班级数据加载失败:', classesResult.result.message);\n        }\n        \n        // 应用筛选条件\n        this.applyFilters();\n        \n      } catch (error) {\n        console.error('加载数据失败:', error);\n        uni.showToast({\n          title: '加载数据失败',\n          icon: 'error'\n        });\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // 从本地缓存加载数据\n    loadFromCache() {\n      console.log('从缓存加载数据');\n      console.log('学生批次数据:', this.localCache.studentsBatches);\n      console.log('班级批次数据:', this.localCache.classesBatches);\n      \n      // 合并所有批次数据\n      this.localCache.allStudents = this.localCache.studentsBatches.flat();\n      this.localCache.allClasses = this.localCache.classesBatches.flat();\n      \n      console.log('合并后学生数据:', this.localCache.allStudents.length, '条');\n      console.log('合并后班级数据:', this.localCache.allClasses.length, '条');\n      \n      // 应用当前筛选条件\n      this.applyFilters();\n      \n      console.log('缓存数据加载完成，学生:', this.students.length, '班级:', this.classes.length);\n    },\n    \n    // 保存缓存数据到本地存储\n    saveCacheToStorage() {\n      try {\n        const cacheData = {\n          studentsBatches: this.localCache.studentsBatches,\n          classesBatches: this.localCache.classesBatches,\n          studentsTotal: this.studentsTotal,\n          classesTotal: this.classesTotal,\n          lastLoadTime: this.localCache.lastLoadTime,\n          isLoaded: this.localCache.isLoaded,\n          // 保存分页信息\n          studentsPage: this.studentsPage,\n          classesPage: this.classesPage,\n          hasMoreStudents: this.hasMoreStudents,\n          hasMoreClasses: this.hasMoreClasses,\n          showStudentsPagination: this.showStudentsPagination,\n          showClassesPagination: this.showClassesPagination\n        };\n        uni.setStorageSync('archive_cache', cacheData);\n        console.log('缓存数据已保存到本地存储');\n      } catch (error) {\n        console.error('保存缓存数据失败:', error);\n      }\n    },\n    \n    // 从本地存储加载缓存数据\n    loadCacheFromStorage() {\n      try {\n        const cacheData = uni.getStorageSync('archive_cache');\n        if (cacheData && cacheData.studentsBatches && cacheData.studentsBatches.length > 0) {\n          this.localCache.studentsBatches = cacheData.studentsBatches;\n          this.localCache.classesBatches = cacheData.classesBatches || [];\n          this.studentsTotal = cacheData.studentsTotal || 0;\n          this.classesTotal = cacheData.classesTotal || 0;\n          this.localCache.lastLoadTime = cacheData.lastLoadTime;\n          this.localCache.isLoaded = cacheData.isLoaded;\n          \n          // 设置分页信息\n          this.studentsPage = cacheData.studentsPage || 1;\n          this.classesPage = cacheData.classesPage || 1;\n          this.hasMoreStudents = cacheData.hasMoreStudents !== undefined ? cacheData.hasMoreStudents : (this.studentsTotal > this.studentsPageSize);\n          this.hasMoreClasses = cacheData.hasMoreClasses !== undefined ? cacheData.hasMoreClasses : (this.classesTotal > this.classesPageSize);\n          this.showStudentsPagination = cacheData.showStudentsPagination !== undefined ? cacheData.showStudentsPagination : (this.studentsTotal > 0);\n          this.showClassesPagination = cacheData.showClassesPagination !== undefined ? cacheData.showClassesPagination : (this.classesTotal > 0);\n          \n          console.log('从本地存储加载缓存数据成功');\n          console.log('学生批次:', this.localCache.studentsBatches.length);\n          console.log('班级批次:', this.localCache.classesBatches.length);\n          console.log('分页信息设置:', {\n            studentsTotal: this.studentsTotal,\n            classesTotal: this.classesTotal,\n            showStudentsPagination: this.showStudentsPagination,\n            showClassesPagination: this.showClassesPagination,\n            hasMoreStudents: this.hasMoreStudents,\n            hasMoreClasses: this.hasMoreClasses\n          });\n          return true;\n        }\n      } catch (error) {\n        console.error('从本地存储加载缓存数据失败:', error);\n      }\n      return false;\n    },\n    \n    // 更新本地缓存（当有新数据录入时调用）\n    async updateLocalCache() {\n      try {\n        console.log('开始更新本地缓存');\n        \n        // 获取最新的学生和班级数据\n        const studentsResult = await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'getStudents',\n            page: 1,\n            pageSize: this.localCache.studentsBatchSize\n          }\n        });\n        \n        const classesResult = await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'getClasses',\n            page: 1,\n            pageSize: this.localCache.classesBatchSize\n          }\n        });\n        \n        if (studentsResult.result.code === 0) {\n          const newStudents = studentsResult.result.data || [];\n          this.localCache.studentsBatches[0] = newStudents;\n          this.studentsTotal = studentsResult.result.total || 0;\n          console.log('学生缓存已更新:', newStudents.length, '条');\n        }\n        \n        if (classesResult.result.code === 0) {\n          const newClasses = classesResult.result.data || [];\n          this.localCache.classesBatches[0] = newClasses;\n          this.classesTotal = classesResult.result.total || 0;\n          console.log('班级缓存已更新:', newClasses.length, '条');\n        }\n        \n        // 更新分页信息\n        this.hasMoreStudents = this.studentsTotal > this.studentsPageSize;\n        this.hasMoreClasses = this.classesTotal > this.classesPageSize;\n        this.showStudentsPagination = this.studentsTotal > 0;\n        this.showClassesPagination = this.classesTotal > 0;\n        \n        // 保存更新后的缓存\n        this.saveCacheToStorage();\n        \n        // 重新加载显示数据\n        this.loadFromCache();\n        \n        console.log('本地缓存更新完成');\n        \n      } catch (error) {\n        console.error('更新本地缓存失败:', error);\n      }\n    },\n    \n    // 添加新班级到本地缓存\n    addClassToLocalCache(newClassData) {\n      try {\n        console.log('添加新班级到本地缓存:', newClassData);\n        \n        if (newClassData && newClassData.classId) {\n          const newClass = {\n            _id: newClassData.classId,\n            className: newClassData.className || '未命名班级',\n            grade: newClassData.grade || '',\n            subject: newClassData.subject || '',\n            headTeacher: newClassData.headTeacher || '',\n            headTeacherId: newClassData.headTeacherId || '',\n            school: newClassData.school || '默认学校',\n            students: [],\n            studentIds: [],\n            studentCount: 0,\n            status: 'active',\n            createTime: newClassData.createTime || new Date().toISOString(),\n            updateTime: newClassData.updateTime || new Date().toISOString()\n          };\n          \n          // 添加到本地缓存\n          this.localCache.allClasses.push(newClass);\n          this.localCache.classesBatches[0].push(newClass);\n          this.classesTotal = this.localCache.allClasses.length;\n          \n          // 更新分页信息\n          this.hasMoreClasses = this.classesTotal > this.classesPageSize;\n          this.showClassesPagination = this.classesTotal > 0;\n          \n          // 保存到本地存储\n          this.saveCacheToStorage();\n          \n          // 重新加载显示数据\n          this.loadFromCache();\n          \n          console.log('新班级已添加到本地缓存:', newClass.className);\n        }\n      } catch (error) {\n        console.error('添加新班级到本地缓存失败:', error);\n      }\n    },\n    \n    // 加载第一批数据（0-50条）\n    async loadFirstBatchData() {\n      try {\n        console.log('开始加载第一批数据（0-50条）');\n        \n        // 获取学生总数和班级总数\n        const studentsCountResult = await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'getStudents',\n            page: 1,\n            pageSize: 1 // 只获取总数\n          }\n        });\n        \n        const classesCountResult = await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'getClasses',\n            page: 1,\n            pageSize: 1 // 只获取总数\n          }\n        });\n        \n        if (studentsCountResult.result.code === 0) {\n          this.studentsTotal = studentsCountResult.result.total || 0;\n          this.localCache.studentsTotalBatches = Math.ceil(this.studentsTotal / this.localCache.studentsBatchSize);\n          console.log('学生总数:', this.studentsTotal, '总批次数:', this.localCache.studentsTotalBatches);\n        }\n        \n        if (classesCountResult.result.code === 0) {\n          this.classesTotal = classesCountResult.result.total || 0;\n          this.localCache.classesTotalBatches = Math.ceil(this.classesTotal / this.localCache.classesBatchSize);\n          console.log('班级总数:', this.classesTotal, '总批次数:', this.localCache.classesTotalBatches);\n        }\n        \n        // 加载第一批学生数据（0-50条）\n        const studentsResult = await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'getStudents',\n            page: 1,\n            pageSize: this.localCache.studentsBatchSize\n          }\n        });\n        \n        // 加载第一批班级数据（0-50条）\n        const classesResult = await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'getClasses',\n            page: 1,\n            pageSize: this.localCache.classesBatchSize\n          }\n        });\n        \n        if (studentsResult.result.code === 0) {\n          const firstBatchStudents = studentsResult.result.data || [];\n          // 确保批次数组存在\n          if (!this.localCache.studentsBatches) {\n            this.localCache.studentsBatches = [];\n          }\n          this.localCache.studentsBatches[0] = firstBatchStudents;\n          this.localCache.currentStudentsBatch = 1;\n          console.log('第一批学生数据加载完成:', firstBatchStudents.length, '条');\n          console.log('学生批次数组:', this.localCache.studentsBatches);\n        }\n        \n        if (classesResult.result.code === 0) {\n          const firstBatchClasses = classesResult.result.data || [];\n          // 确保批次数组存在\n          if (!this.localCache.classesBatches) {\n            this.localCache.classesBatches = [];\n          }\n          this.localCache.classesBatches[0] = firstBatchClasses;\n          this.localCache.currentClassesBatch = 1;\n          console.log('第一批班级数据加载完成:', firstBatchClasses.length, '条');\n          console.log('班级批次数组:', this.localCache.classesBatches);\n        }\n        \n        // 立即显示第一批数据\n        this.loadFromCache();\n        \n        // 设置分页信息\n        this.studentsPage = 1;\n        this.classesPage = 1;\n        this.hasMoreStudents = this.localCache.currentStudentsBatch < this.localCache.studentsTotalBatches;\n        this.hasMoreClasses = this.localCache.currentClassesBatch < this.localCache.classesTotalBatches;\n        this.showStudentsPagination = this.studentsTotal > 0;\n        this.showClassesPagination = this.classesTotal > 0;\n        \n        console.log('第一批数据加载完成，开始显示');\n        \n      } catch (error) {\n        console.error('加载第一批数据失败:', error);\n        throw error;\n      }\n    },\n    \n    // 后台加载剩余批次数据\n    async loadRemainingBatchesInBackground() {\n      try {\n        console.log('开始后台加载剩余批次数据');\n        this.localCache.isLoadingBackground = true;\n        this.localCache.backgroundLoadProgress = 0;\n        \n        const totalBatches = this.localCache.studentsTotalBatches + this.localCache.classesTotalBatches;\n        let loadedBatches = 0;\n        \n        // 加载剩余学生数据批次\n        for (let batchIndex = 1; batchIndex < this.localCache.studentsTotalBatches; batchIndex++) {\n          try {\n            const page = batchIndex + 1; // 第2页开始\n            const result = await uniCloud.callFunction({\n              name: 'archive-manager',\n              data: {\n                action: 'getStudents',\n                page: page,\n                pageSize: this.localCache.studentsBatchSize\n              }\n            });\n            \n            if (result.result.code === 0) {\n              const batchData = result.result.data || [];\n              // 确保批次数组存在\n              if (!this.localCache.studentsBatches) {\n                this.localCache.studentsBatches = [];\n              }\n              this.localCache.studentsBatches[batchIndex] = batchData;\n              this.localCache.currentStudentsBatch = batchIndex + 1;\n              console.log(`学生数据第${batchIndex + 1}批加载完成:`, batchData.length, '条');\n              console.log('学生批次数组更新:', this.localCache.studentsBatches);\n            }\n            \n            loadedBatches++;\n            this.localCache.backgroundLoadProgress = Math.round((loadedBatches / totalBatches) * 100);\n            \n            // 保存更新后的缓存数据到本地存储\n            this.saveCacheToStorage();\n            \n            // 添加小延迟，避免请求过于频繁\n            await new Promise(resolve => setTimeout(resolve, 200));\n          } catch (error) {\n            console.error(`加载学生数据第${batchIndex + 1}批失败:`, error);\n          }\n        }\n        \n        // 加载剩余班级数据批次\n        for (let batchIndex = 1; batchIndex < this.localCache.classesTotalBatches; batchIndex++) {\n          try {\n            const page = batchIndex + 1; // 第2页开始\n            const result = await uniCloud.callFunction({\n              name: 'archive-manager',\n              data: {\n                action: 'getClasses',\n                page: page,\n                pageSize: this.localCache.classesBatchSize\n              }\n            });\n            \n            if (result.result.code === 0) {\n              const batchData = result.result.data || [];\n              // 确保批次数组存在\n              if (!this.localCache.classesBatches) {\n                this.localCache.classesBatches = [];\n              }\n              this.localCache.classesBatches[batchIndex] = batchData;\n              this.localCache.currentClassesBatch = batchIndex + 1;\n              console.log(`班级数据第${batchIndex + 1}批加载完成:`, batchData.length, '条');\n              console.log('班级批次数组更新:', this.localCache.classesBatches);\n            }\n            \n            loadedBatches++;\n            this.localCache.backgroundLoadProgress = Math.round((loadedBatches / totalBatches) * 100);\n            \n            // 保存更新后的缓存数据到本地存储\n            this.saveCacheToStorage();\n            \n            // 添加小延迟，避免请求过于频繁\n            await new Promise(resolve => setTimeout(resolve, 200));\n          } catch (error) {\n            console.error(`加载班级数据第${batchIndex + 1}批失败:`, error);\n          }\n        }\n        \n        this.localCache.backgroundLoadProgress = 100;\n        console.log('所有批次数据加载完成');\n        \n        // 后台加载完成后更新显示数据\n        this.loadFromCache();\n        \n      } catch (error) {\n        console.error('后台加载剩余批次数据失败:', error);\n      } finally {\n        this.localCache.isLoadingBackground = false;\n      }\n    },\n    \n    \n    \n    // 应用筛选条件\n    applyFilters() {\n      console.log('开始应用筛选条件');\n      console.log('localCache.allStudents:', this.localCache.allStudents?.length || 0);\n      console.log('localCache.allClasses:', this.localCache.allClasses?.length || 0);\n      \n      // 更新总数（用于分页计算）\n      this.studentsTotal = this.filteredStudents.length;\n      this.classesTotal = this.filteredClasses.length;\n      \n      console.log('筛选后学生总数:', this.studentsTotal);\n      console.log('筛选后班级总数:', this.classesTotal);\n      console.log('分页后学生数据:', this.paginatedStudents.length);\n      console.log('分页后班级数据:', this.paginatedClasses.length);\n      \n      // 更新分页信息\n      this.hasMoreStudents = this.studentsTotal > this.studentsPageSize;\n      this.hasMoreClasses = this.classesTotal > this.classesPageSize;\n      this.showStudentsPagination = this.studentsTotal > 0;\n      this.showClassesPagination = this.classesTotal > 0;\n      \n      console.log('筛选完成 - 学生总数:', this.studentsTotal, '班级总数:', this.classesTotal);\n      console.log('学生页数:', this.studentsPage, '班级页数:', this.classesPage);\n      console.log('显示学生分页:', this.showStudentsPagination, '显示班级分页:', this.showClassesPagination);\n    },\n    \n    // 添加新学生到本地缓存\n    addStudentToCache(student) {\n      this.localCache.allStudents.push(student);\n      this.applyFilters();\n    },\n    \n    // 添加新班级到本地缓存\n    addClassToCache(classItem) {\n      this.localCache.allClasses.push(classItem);\n      this.applyFilters();\n    },\n    \n    // 从本地缓存删除学生\n    removeStudentFromCache(studentId) {\n      this.localCache.allStudents = this.localCache.allStudents.filter(s => s.studentId !== studentId);\n      this.applyFilters();\n    },\n    \n    // 从本地缓存删除班级\n    removeClassFromCache(classId) {\n      this.localCache.allClasses = this.localCache.allClasses.filter(c => c._id !== classId);\n      this.applyFilters();\n    },\n    \n    // 刷新本地缓存（重新从数据库加载）\n    async refreshCache() {\n      this.localCache.isLoaded = false;\n      await this.loadAllData();\n    },\n    \n    // 加载指定页的学生数据（使用本地缓存）\n    loadStudentsPage(page) {\n      this.studentsPage = page;\n      this.hasMoreStudents = this.studentsPage < Math.ceil(this.studentsTotal / this.studentsPageSize);\n      \n      // 使用本地缓存数据应用筛选和分页\n      this.applyFilters();\n      \n      console.log(`切换到第${page}页学生数据:`, this.students.length, '条');\n    },\n    \n    // 加载指定页的班级数据（使用本地缓存）\n    loadClassesPage(page) {\n      this.classesPage = page;\n      this.hasMoreClasses = this.classesPage < Math.ceil(this.classesTotal / this.classesPageSize);\n      \n      // 使用本地缓存数据应用筛选和分页\n      this.applyFilters();\n      \n      console.log(`切换到第${page}页班级数据:`, this.classes.length, '条');\n    },\n    \n    // 上一页\n    prevPage(type) {\n      if (type === 'students' && this.studentsPage > 1) {\n        this.loadStudentsPage(this.studentsPage - 1);\n      } else if (type === 'classes' && this.classesPage > 1) {\n        this.loadClassesPage(this.classesPage - 1);\n      }\n    },\n    \n    // 下一页\n    nextPage(type) {\n      if (type === 'students') {\n        if (this.hasMoreStudents) {\n          this.loadStudentsPage(this.studentsPage + 1);\n        } else {\n          uni.showToast({\n            title: '当前已是最后一页',\n            icon: 'none',\n            duration: 1500\n          });\n        }\n      } else if (type === 'classes') {\n        if (this.hasMoreClasses) {\n          this.loadClassesPage(this.classesPage + 1);\n        } else {\n          uni.showToast({\n            title: '当前已是最后一页',\n            icon: 'none',\n            duration: 1500\n          });\n        }\n      }\n    },\n    \n    \n    navigateToStudentDetail(student) {\n      uni.navigateTo({\n        url: `/pages/student-detail/student-detail?studentId=${student.studentId}`\n      });\n    },\n    navigateToClassDetail(classItem) {\n      uni.navigateTo({\n        url: `/pages/class-detail/class-detail?classId=${classItem._id}`\n      });\n    },\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    },\n    // 编辑模式相关方法\n    enterEditMode() {\n      this.isEditMode = true;\n      this.selectedItems = [];\n    },\n    exitEditMode() {\n      this.isEditMode = false;\n      this.selectedItems = [];\n    },\n    toggleSelectAll() {\n      const currentItems = this.activeTab === 'students' ? this.filteredStudents : \n                          this.activeTab === 'classes' ? this.filteredClasses : \n                          [...this.filteredStudents, ...this.filteredClasses];\n      \n      if (this.isAllSelected) {\n        this.selectedItems = [];\n      } else {\n        this.selectedItems = [...currentItems];\n      }\n    },\n    isStudentSelected(student) {\n      return this.selectedItems.some(item => item._id === student._id);\n    },\n    isClassSelected(classItem) {\n      return this.selectedItems.some(item => item._id === classItem._id);\n    },\n    toggleStudentSelection(student) {\n      const index = this.selectedItems.findIndex(item => item._id === student._id);\n      if (index > -1) {\n        this.selectedItems.splice(index, 1);\n      } else {\n        this.selectedItems.push(student);\n      }\n    },\n    toggleClassSelection(classItem) {\n      const index = this.selectedItems.findIndex(item => item._id === classItem._id);\n      if (index > -1) {\n        this.selectedItems.splice(index, 1);\n      } else {\n        this.selectedItems.push(classItem);\n      }\n    },\n    // 删除相关方法\n    showDeleteConfirm(item, type) {\n      this.deleteTarget = item;\n      this.deleteType = type;\n      this.deleteMessage = `确定要删除${type === 'student' ? '学生' : '班级'} \"${item.name || item.className}\" 吗？`;\n      this.showDeleteModal = true;\n    },\n    showBatchDeleteConfirm() {\n      if (this.selectedItems.length === 0) return;\n      \n      this.deleteTarget = this.selectedItems;\n      this.deleteType = 'batch';\n      this.deleteMessage = `确定要删除选中的 ${this.selectedItems.length} 项吗？`;\n      this.showDeleteModal = true;\n    },\n    closeDeleteModal() {\n      this.showDeleteModal = false;\n      this.deleteTarget = null;\n      this.deleteType = '';\n      this.deleteMessage = '';\n    },\n    async confirmDelete() {\n      try {\n        if (this.deleteType === 'batch') {\n          await this.batchDelete();\n        } else {\n          await this.singleDelete();\n        }\n        this.closeDeleteModal();\n        this.loadData(); // 重新加载数据\n        uni.showToast({\n          title: '删除成功',\n          icon: 'success'\n        });\n      } catch (error) {\n        console.error('删除失败:', error);\n        uni.showToast({\n          title: '删除失败',\n          icon: 'error'\n        });\n      }\n    },\n    async singleDelete() {\n      const { deleteTarget, deleteType } = this;\n      \n      if (deleteType === 'student') {\n        await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'deleteStudent',\n            studentId: deleteTarget.studentId\n          }\n        });\n      } else if (deleteType === 'class') {\n        await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'deleteClass',\n            classId: deleteTarget._id\n          }\n        });\n      }\n    },\n    async batchDelete() {\n      const students = this.selectedItems.filter(item => this.students.some(s => s._id === item._id));\n      const classes = this.selectedItems.filter(item => this.classes.some(c => c._id === item._id));\n      \n      // 批量删除学生\n      if (students.length > 0) {\n        await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'batchDeleteStudents',\n            studentIds: students.map(s => s.studentId)\n          }\n        });\n      }\n      \n      // 批量删除班级\n      if (classes.length > 0) {\n        await uniCloud.callFunction({\n          name: 'archive-manager',\n          data: {\n            action: 'batchDeleteClasses',\n            classIds: classes.map(c => c._id)\n          }\n        });\n      }\n      \n      this.selectedItems = [];\n    }\n  }\n}\n</script>\n\n<style scoped>\n.container {\n  padding: 20rpx;\n  background: #f8f8f8;\n  min-height: 100vh;\n  padding-top: 120rpx;\n  /* 为底部工具栏留出空间 */\n  padding-bottom: 120rpx;\n}\n\n/* 自定义导航栏样式 */\n.custom-navbar {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 999;\n  background: #fff;\n  border-bottom: 1rpx solid #e5e5e5;\n}\n\n.navbar-content {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 88rpx;\n  padding: 0 30rpx;\n  padding-top: var(--status-bar-height, 0);\n}\n\n.navbar-left {\n  display: flex;\n  align-items: center;\n  padding: 10rpx 0;\n}\n\n.back-icon {\n  font-size: 40rpx;\n  color: #333;\n  margin-right: 8rpx;\n  font-weight: bold;\n}\n\n.back-text {\n  font-size: 28rpx;\n  color: #333;\n}\n\n.navbar-title {\n  font-size: 32rpx;\n  font-weight: bold;\n  color: #333;\n}\n\n.navbar-right {\n  width: 100rpx;\n}\n\n/* 搜索栏样式 */\n.search-container {\n  margin-bottom: 20rpx;\n}\n\n.search-bar {\n  display: flex;\n  align-items: center;\n  background: #fff;\n  border-radius: 12rpx;\n  padding: 20rpx;\n  box-shadow: 0 2rpx 8rpx rgba(0,0,0,0.1);\n}\n\n.search-icon {\n  font-size: 28rpx;\n  color: #999;\n  margin-right: 15rpx;\n}\n\n.search-input {\n  flex: 1;\n  font-size: 28rpx;\n  color: #333;\n}\n\n.clear-btn {\n  width: 40rpx;\n  height: 40rpx;\n  border-radius: 50%;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.clear-icon {\n  font-size: 24rpx;\n  color: #999;\n}\n\n/* 分类标签样式 */\n.category-tabs {\n  display: flex;\n  background: #fff;\n  border-radius: 12rpx;\n  padding: 8rpx;\n  margin-bottom: 20rpx;\n  box-shadow: 0 2rpx 8rpx rgba(0,0,0,0.1);\n}\n\n.category-tab {\n  flex: 1;\n  text-align: center;\n  padding: 20rpx 0;\n  font-size: 28rpx;\n  color: #666;\n  border-radius: 8rpx;\n  transition: all 0.3s;\n}\n\n.category-tab.active {\n  background: #4FC3F7;\n  color: #fff;\n  font-weight: bold;\n}\n\n/* 批量操作工具栏样式 - 固定在底部 */\n.batch-toolbar-fixed {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 1000;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background: #fff;\n  padding: 20rpx 30rpx;\n  border-top: 1rpx solid #e5e5e5;\n  box-shadow: 0 -2rpx 8rpx rgba(0,0,0,0.1);\n  /* 为底部工具栏留出空间 */\n  padding-bottom: calc(20rpx + env(safe-area-inset-bottom));\n}\n\n.toolbar-left {\n  display: flex;\n  align-items: center;\n  gap: 20rpx;\n}\n\n.select-all-btn {\n  padding: 10rpx 20rpx;\n  background: #4FC3F7;\n  color: #fff;\n  border-radius: 6rpx;\n  font-size: 24rpx;\n}\n\n.selected-count {\n  font-size: 26rpx;\n  color: #666;\n}\n\n.toolbar-right {\n  display: flex;\n  gap: 15rpx;\n}\n\n.batch-delete-btn,\n.exit-edit-btn {\n  padding: 10rpx 20rpx;\n  border-radius: 6rpx;\n  font-size: 24rpx;\n  border: none;\n}\n\n.batch-delete-btn {\n  background: #ff6b6b;\n  color: #fff;\n}\n\n.batch-delete-btn:disabled {\n  background: #ccc;\n}\n\n.exit-edit-btn {\n  background: #4FC3F7;\n  color: #fff;\n}\n\n/* 编辑模式切换按钮 */\n.edit-mode-toggle {\n  position: fixed;\n  bottom: 30rpx;\n  right: 30rpx;\n  z-index: 100;\n}\n\n.edit-mode-btn {\n  width: 100rpx;\n  height: 100rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s;\n}\n\n.edit-mode-btn:active {\n  transform: scale(0.95);\n}\n\n.edit-icon {\n  width: 100rpx;\n  height: 100rpx;\n}\n\n/* 筛选条件样式 */\n.filter-container {\n  background: #fff;\n  border-radius: 12rpx;\n  padding: 20rpx;\n  margin-bottom: 20rpx;\n  box-shadow: 0 2rpx 8rpx rgba(0,0,0,0.1);\n}\n\n.filter-row {\n  display: flex;\n  align-items: center;\n  gap: 20rpx;\n}\n\n.filter-item {\n  flex: 1;\n  display: flex;\n  align-items: center;\n}\n\n.filter-label {\n  font-size: 26rpx;\n  color: #333;\n  margin-right: 10rpx;\n  min-width: 100rpx;\n}\n\n.filter-picker {\n  flex: 1;\n  padding: 15rpx 20rpx;\n  border: 1rpx solid #e5e5e5;\n  border-radius: 8rpx;\n  font-size: 26rpx;\n  color: #333;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.picker-arrow {\n  font-size: 20rpx;\n  color: #999;\n}\n\n/* 数据容器样式 */\n.data-container {\n  margin-bottom: 20rpx;\n}\n\n.loading-container {\n  text-align: center;\n  padding: 60rpx 0;\n}\n\n.loading-text {\n  font-size: 28rpx;\n  color: #999;\n}\n\n/* 分组样式 */\n.section {\n  margin-bottom: 30rpx;\n}\n\n.section-title {\n  margin-bottom: 20rpx;\n}\n\n.title-text {\n  font-size: 30rpx;\n  font-weight: bold;\n  color: #333;\n}\n\n/* 学生卡片样式 */\n.student-list {\n  background: #fff;\n  border-radius: 12rpx;\n  overflow: hidden;\n  box-shadow: 0 2rpx 8rpx rgba(0,0,0,0.1);\n}\n\n.student-card {\n  display: flex;\n  align-items: center;\n  padding: 25rpx;\n  border-bottom: 1rpx solid #f0f0f0;\n  transition: all 0.3s;\n}\n\n.student-card:last-child {\n  border-bottom: none;\n}\n\n.student-card.selected {\n  background: #f0f8ff;\n  border-left: 4rpx solid #4FC3F7;\n}\n\n/* 选择框样式 */\n.selection-checkbox {\n  margin-right: 20rpx;\n}\n\n.checkbox {\n  width: 40rpx;\n  height: 40rpx;\n  border: 2rpx solid #ddd;\n  border-radius: 6rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #fff;\n}\n\n.checkbox.checked {\n  background: #4FC3F7;\n  border-color: #4FC3F7;\n}\n\n.check-icon {\n  font-size: 24rpx;\n  color: #fff;\n  font-weight: bold;\n}\n\n/* 编辑操作按钮 */\n.edit-actions {\n  display: flex;\n  gap: 10rpx;\n}\n\n.delete-btn {\n  padding: 8rpx 16rpx;\n  background: #ff6b6b;\n  color: #fff;\n  border: none;\n  border-radius: 6rpx;\n  font-size: 22rpx;\n}\n\n.student-avatar {\n  width: 80rpx;\n  height: 80rpx;\n  border-radius: 50%;\n  background: #4FC3F7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20rpx;\n}\n\n.avatar-text {\n  font-size: 32rpx;\n  color: #fff;\n  font-weight: bold;\n}\n\n.student-info {\n  flex: 1;\n}\n\n.student-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 8rpx;\n}\n\n.student-name {\n  font-size: 30rpx;\n  font-weight: bold;\n  color: #333;\n  margin-right: 15rpx;\n}\n\n.student-id {\n  font-size: 24rpx;\n  color: #4FC3F7;\n  background: #f0f8ff;\n  padding: 4rpx 12rpx;\n  border-radius: 6rpx;\n}\n\n.student-details {\n  margin-bottom: 8rpx;\n}\n\n.student-grade,\n.student-subjects,\n.student-school {\n  font-size: 24rpx;\n  color: #666;\n  margin-right: 15rpx;\n}\n\n.student-meta {\n  display: flex;\n  align-items: center;\n}\n\n.create-time,\n.create-by {\n  font-size: 22rpx;\n  color: #999;\n  margin-right: 15rpx;\n}\n\n.student-actions {\n  margin-left: 15rpx;\n}\n\n.action-icon {\n  font-size: 28rpx;\n  color: #ccc;\n}\n\n/* 班级卡片样式 */\n.class-list {\n  background: #fff;\n  border-radius: 12rpx;\n  overflow: hidden;\n  box-shadow: 0 2rpx 8rpx rgba(0,0,0,0.1);\n}\n\n.class-card {\n  display: flex;\n  align-items: center;\n  padding: 25rpx;\n  border-bottom: 1rpx solid #f0f0f0;\n  transition: all 0.3s;\n}\n\n.class-card:last-child {\n  border-bottom: none;\n}\n\n.class-card.selected {\n  background: #f0f8ff;\n  border-left: 4rpx solid #4FC3F7;\n}\n\n.class-icon {\n  width: 80rpx;\n  height: 80rpx;\n  border-radius: 12rpx;\n  background: #9C27B0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20rpx;\n}\n\n.class-icon-text {\n  font-size: 28rpx;\n  color: #fff;\n  font-weight: bold;\n}\n\n.class-info {\n  flex: 1;\n}\n\n.class-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 8rpx;\n}\n\n.class-name {\n  font-size: 30rpx;\n  font-weight: bold;\n  color: #333;\n  margin-right: 15rpx;\n}\n\n.class-code {\n  font-size: 24rpx;\n  color: #9C27B0;\n  background: #f3e5f5;\n  padding: 4rpx 12rpx;\n  border-radius: 6rpx;\n}\n\n.class-details {\n  margin-bottom: 8rpx;\n}\n\n.class-grade,\n.class-teacher,\n.class-student-count {\n  font-size: 24rpx;\n  color: #666;\n  margin-right: 15rpx;\n}\n\n.class-meta {\n  display: flex;\n  align-items: center;\n}\n\n.class-actions {\n  margin-left: 15rpx;\n}\n\n/* 空状态样式 */\n.empty-state {\n  text-align: center;\n  padding: 80rpx 0;\n  background: #fff;\n  border-radius: 12rpx;\n  box-shadow: 0 2rpx 8rpx rgba(0,0,0,0.1);\n}\n\n.empty-text {\n  font-size: 28rpx;\n  color: #999;\n}\n\n/* 后台加载进度指示器样式 */\n.background-loading-indicator {\n  background: #f0f8ff;\n  border: 1rpx solid #e3f2fd;\n  border-radius: 8rpx;\n  margin: 20rpx;\n  padding: 20rpx;\n}\n\n.loading-progress {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.loading-text {\n  color: #1976d2;\n  font-size: 24rpx;\n  margin-bottom: 10rpx;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 6rpx;\n  background: #e0e0e0;\n  border-radius: 3rpx;\n  overflow: hidden;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #1976d2, #42a5f5);\n  border-radius: 3rpx;\n  transition: width 0.3s ease;\n}\n\n/* 分页控件样式 */\n.pagination-container {\n  background: #f8f9fa;\n  border: 1rpx solid #e9ecef;\n  border-radius: 8rpx;\n  margin: 20rpx;\n  padding: 20rpx;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.pagination-info {\n  flex: 1;\n}\n\n.pagination-text {\n  color: #666;\n  font-size: 26rpx;\n}\n\n.pagination-buttons {\n  display: flex;\n  gap: 20rpx;\n}\n\n.pagination-btn {\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 6rpx;\n  padding: 12rpx 24rpx;\n  font-size: 26rpx;\n  min-width: 120rpx;\n}\n\n.pagination-btn:disabled {\n  background: #ccc;\n  color: #999;\n}\n\n.pagination-btn:not(:disabled):active {\n  background: #0056b3;\n}\n\n\n/* 删除确认弹窗样式 */\n.delete-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0,0,0,0.5);\n  z-index: 1000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 40rpx;\n}\n\n.delete-modal-content {\n  background: #fff;\n  border-radius: 16rpx;\n  width: 100%;\n  max-width: 600rpx;\n  overflow: hidden;\n}\n\n.delete-header {\n  padding: 30rpx;\n  border-bottom: 1rpx solid #f0f0f0;\n  text-align: center;\n}\n\n.delete-title {\n  font-size: 32rpx;\n  font-weight: bold;\n  color: #333;\n}\n\n.delete-body {\n  padding: 30rpx;\n  text-align: center;\n}\n\n.delete-message {\n  font-size: 28rpx;\n  color: #666;\n  line-height: 1.5;\n}\n\n.delete-footer {\n  display: flex;\n  padding: 30rpx;\n  gap: 20rpx;\n  border-top: 1rpx solid #f0f0f0;\n}\n\n.cancel-delete-btn,\n.confirm-delete-btn {\n  flex: 1;\n  height: 80rpx;\n  border-radius: 8rpx;\n  font-size: 28rpx;\n  font-weight: bold;\n  border: none;\n}\n\n.cancel-delete-btn {\n  background: #f0f0f0;\n  color: #666;\n}\n\n.confirm-delete-btn {\n  background: #ff6b6b;\n  color: #fff;\n}\n</style>\n","import mod from \"-!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./archive.vue?vue&type=style&index=0&id=76a5fae8&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./archive.vue?vue&type=style&index=0&id=76a5fae8&scoped=true&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1759362723334\n      var cssReload = require(\"D:/hbuilderx/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"/\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}